=begin
#Treezor

#Treezor API.  more info [here](https://www.treezor.com). 

OpenAPI spec version: 0.1.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.19

=end

require 'uri'

module TreezorClient
  class CardApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # get a card image
    # Return virtual card's image
    # @param card_id Vitual card&#39;s id.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_signature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
    # @option opts [String] :access_tag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
    # @option opts [Integer] :access_user_id Access user&#39;s id is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @option opts [String] :access_user_ip Access user&#39;s ip is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @return [InlineResponse2006]
    def cardimages_get(card_id, opts = {})
      data, _status_code, _headers = cardimages_get_with_http_info(card_id, opts)
      data
    end

    # get a card image
    # Return virtual card&#39;s image
    # @param card_id Vitual card&#39;s id.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_signature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
    # @option opts [String] :access_tag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
    # @option opts [Integer] :access_user_id Access user&#39;s id is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @option opts [String] :access_user_ip Access user&#39;s ip is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @return [Array<(InlineResponse2006, Fixnum, Hash)>] InlineResponse2006 data, response status code and response headers
    def cardimages_get_with_http_info(card_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardApi.cardimages_get ...'
      end
      # verify the required parameter 'card_id' is set
      if @api_client.config.client_side_validation && card_id.nil?
        fail ArgumentError, "Missing the required parameter 'card_id' when calling CardApi.cardimages_get"
      end
      # resource path
      local_var_path = '/cardimages'

      # query parameters
      query_params = {}
      query_params[:'cardId'] = card_id
      query_params[:'accessSignature'] = opts[:'access_signature'] if !opts[:'access_signature'].nil?
      query_params[:'accessTag'] = opts[:'access_tag'] if !opts[:'access_tag'].nil?
      query_params[:'accessUserId'] = opts[:'access_user_id'] if !opts[:'access_user_id'].nil?
      query_params[:'accessUserIp'] = opts[:'access_user_ip'] if !opts[:'access_user_ip'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2006')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardApi#cardimages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # create a virtual card
    # Create a new virtual card. To use a card you will need to activate it (/cards/{id}/Activate/).
    # @param user_id User&#39;s id of cardholder
    # @param wallet_id Wallet&#39;s Id in which to create the card
    # @param perms_group Permissions group of the card. There is 4 usages which create 16 possible groups:  | group | NFC | ATM | On-line | Foreign | |-----|-----|-----|-----|------| |TRZ-CU-001|KO|KO|KO|KO| |TRZ-CU-002|KO|KO|KO|OK| |TRZ-CU-003|KO|KO|OK|KO| |TRZ-CU-004|KO|KO|OK|OK| |TRZ-CU-005|KO|OK|KO|KO| |TRZ-CU-006|KO|OK|KO|OK| |TRZ-CU-007|KO|OK|OK|KO| |TRZ-CU-008|KO|OK|OK|OK| |TRZ-CU-009|OK|KO|KO|KO| |TRZ-CU-010|OK|KO|KO|OK| |TRZ-CU-011|OK|KO|OK|KO| |TRZ-CU-012|OK|KO|OK|OK| |TRZ-CU-013|OK|OK|KO|KO| |TRZ-CU-014|OK|OK|KO|OK| |TRZ-CU-015|OK|OK|OK|KO| |TRZ-CU-016|OK|OK|OK|OK| 
    # @param card_print Card appareance code, also used to choose the program ID of the card
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_signature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
    # @option opts [String] :card_tag Custom field
    # @option opts [Integer] :batch_delivery_id Batch regroupement identifier (must be between 1 and 238327) NOT YET OPERATIONAL
    # @option opts [Integer] :limit_atm_year ATM operations limit for a sliding year. No default value.
    # @option opts [Integer] :limit_atm_month ATM operations limit for a sliding month. No default value.
    # @option opts [Integer] :limit_atm_week ATM operations limit for a sliding week. Default value 2000Ã¢â€šÂ¬.
    # @option opts [Integer] :limit_atm_day ATM operations limit for a single day. Default value 1000Ã¢â€šÂ¬.
    # @option opts [Integer] :limit_atm_all ATM operations limit from beginning. No default value.
    # @option opts [Integer] :limit_payment_year POS operations limit for a sliding year. No default value.
    # @option opts [Integer] :limit_payment_month POS operations limit for a sliding month. No default value.
    # @option opts [Integer] :limit_payment_week POS operations limit for a sliding week. Default value 3000Ã¢â€šÂ¬.
    # @option opts [Integer] :limit_payment_day POS operations limit for a single day. Default value 2000Ã¢â€šÂ¬.
    # @option opts [Integer] :limit_payment_all POS operations limit from beginning. No default value.
    # @option opts [Float] :payment_daily_limit POS operations limit for a single day including cents. The decimal delimiter must be \&quot;.\&quot;. No default value.
    # @option opts [String] :pin Card&#39;s PIN code value.
    # @option opts [Integer] :anonymous Card is anonymous. If value is 1 there will be no embossed name.
    # @option opts [Integer] :send_to_parent If you put the value 1 the delivery address will be the parent user&#39;s.
    # @option opts [Integer] :mcc_restriction_group_id mccRestrictionGroupId you want to apply
    # @option opts [Integer] :merchant_restriction_group_id merchantRestrictionGroupId you want to apply
    # @option opts [Integer] :country_restriction_group_id countryRestrictionGroupId you want to apply
    # @option opts [String] :access_tag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
    # @option opts [Integer] :access_user_id Access user&#39;s id is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @option opts [String] :access_user_ip Access user&#39;s ip is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @return [InlineResponse2005]
    def cards_create_virtual_post(user_id, wallet_id, perms_group, card_print, opts = {})
      data, _status_code, _headers = cards_create_virtual_post_with_http_info(user_id, wallet_id, perms_group, card_print, opts)
      data
    end

    # create a virtual card
    # Create a new virtual card. To use a card you will need to activate it (/cards/{id}/Activate/).
    # @param user_id User&#39;s id of cardholder
    # @param wallet_id Wallet&#39;s Id in which to create the card
    # @param perms_group Permissions group of the card. There is 4 usages which create 16 possible groups:  | group | NFC | ATM | On-line | Foreign | |-----|-----|-----|-----|------| |TRZ-CU-001|KO|KO|KO|KO| |TRZ-CU-002|KO|KO|KO|OK| |TRZ-CU-003|KO|KO|OK|KO| |TRZ-CU-004|KO|KO|OK|OK| |TRZ-CU-005|KO|OK|KO|KO| |TRZ-CU-006|KO|OK|KO|OK| |TRZ-CU-007|KO|OK|OK|KO| |TRZ-CU-008|KO|OK|OK|OK| |TRZ-CU-009|OK|KO|KO|KO| |TRZ-CU-010|OK|KO|KO|OK| |TRZ-CU-011|OK|KO|OK|KO| |TRZ-CU-012|OK|KO|OK|OK| |TRZ-CU-013|OK|OK|KO|KO| |TRZ-CU-014|OK|OK|KO|OK| |TRZ-CU-015|OK|OK|OK|KO| |TRZ-CU-016|OK|OK|OK|OK| 
    # @param card_print Card appareance code, also used to choose the program ID of the card
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_signature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
    # @option opts [String] :card_tag Custom field
    # @option opts [Integer] :batch_delivery_id Batch regroupement identifier (must be between 1 and 238327) NOT YET OPERATIONAL
    # @option opts [Integer] :limit_atm_year ATM operations limit for a sliding year. No default value.
    # @option opts [Integer] :limit_atm_month ATM operations limit for a sliding month. No default value.
    # @option opts [Integer] :limit_atm_week ATM operations limit for a sliding week. Default value 2000Ã¢â€šÂ¬.
    # @option opts [Integer] :limit_atm_day ATM operations limit for a single day. Default value 1000Ã¢â€šÂ¬.
    # @option opts [Integer] :limit_atm_all ATM operations limit from beginning. No default value.
    # @option opts [Integer] :limit_payment_year POS operations limit for a sliding year. No default value.
    # @option opts [Integer] :limit_payment_month POS operations limit for a sliding month. No default value.
    # @option opts [Integer] :limit_payment_week POS operations limit for a sliding week. Default value 3000Ã¢â€šÂ¬.
    # @option opts [Integer] :limit_payment_day POS operations limit for a single day. Default value 2000Ã¢â€šÂ¬.
    # @option opts [Integer] :limit_payment_all POS operations limit from beginning. No default value.
    # @option opts [Float] :payment_daily_limit POS operations limit for a single day including cents. The decimal delimiter must be \&quot;.\&quot;. No default value.
    # @option opts [String] :pin Card&#39;s PIN code value.
    # @option opts [Integer] :anonymous Card is anonymous. If value is 1 there will be no embossed name.
    # @option opts [Integer] :send_to_parent If you put the value 1 the delivery address will be the parent user&#39;s.
    # @option opts [Integer] :mcc_restriction_group_id mccRestrictionGroupId you want to apply
    # @option opts [Integer] :merchant_restriction_group_id merchantRestrictionGroupId you want to apply
    # @option opts [Integer] :country_restriction_group_id countryRestrictionGroupId you want to apply
    # @option opts [String] :access_tag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
    # @option opts [Integer] :access_user_id Access user&#39;s id is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @option opts [String] :access_user_ip Access user&#39;s ip is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @return [Array<(InlineResponse2005, Fixnum, Hash)>] InlineResponse2005 data, response status code and response headers
    def cards_create_virtual_post_with_http_info(user_id, wallet_id, perms_group, card_print, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardApi.cards_create_virtual_post ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling CardApi.cards_create_virtual_post"
      end
      # verify the required parameter 'wallet_id' is set
      if @api_client.config.client_side_validation && wallet_id.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_id' when calling CardApi.cards_create_virtual_post"
      end
      # verify the required parameter 'perms_group' is set
      if @api_client.config.client_side_validation && perms_group.nil?
        fail ArgumentError, "Missing the required parameter 'perms_group' when calling CardApi.cards_create_virtual_post"
      end
      # verify the required parameter 'card_print' is set
      if @api_client.config.client_side_validation && card_print.nil?
        fail ArgumentError, "Missing the required parameter 'card_print' when calling CardApi.cards_create_virtual_post"
      end
      # resource path
      local_var_path = '/cards/CreateVirtual'

      # query parameters
      query_params = {}
      query_params[:'userId'] = user_id
      query_params[:'walletId'] = wallet_id
      query_params[:'permsGroup'] = perms_group
      query_params[:'cardPrint'] = card_print
      query_params[:'accessSignature'] = opts[:'access_signature'] if !opts[:'access_signature'].nil?
      query_params[:'cardTag'] = opts[:'card_tag'] if !opts[:'card_tag'].nil?
      query_params[:'batchDeliveryId'] = opts[:'batch_delivery_id'] if !opts[:'batch_delivery_id'].nil?
      query_params[:'limitAtmYear'] = opts[:'limit_atm_year'] if !opts[:'limit_atm_year'].nil?
      query_params[:'limitAtmMonth'] = opts[:'limit_atm_month'] if !opts[:'limit_atm_month'].nil?
      query_params[:'limitAtmWeek'] = opts[:'limit_atm_week'] if !opts[:'limit_atm_week'].nil?
      query_params[:'limitAtmDay'] = opts[:'limit_atm_day'] if !opts[:'limit_atm_day'].nil?
      query_params[:'limitAtmAll'] = opts[:'limit_atm_all'] if !opts[:'limit_atm_all'].nil?
      query_params[:'limitPaymentYear'] = opts[:'limit_payment_year'] if !opts[:'limit_payment_year'].nil?
      query_params[:'limitPaymentMonth'] = opts[:'limit_payment_month'] if !opts[:'limit_payment_month'].nil?
      query_params[:'limitPaymentWeek'] = opts[:'limit_payment_week'] if !opts[:'limit_payment_week'].nil?
      query_params[:'limitPaymentDay'] = opts[:'limit_payment_day'] if !opts[:'limit_payment_day'].nil?
      query_params[:'limitPaymentAll'] = opts[:'limit_payment_all'] if !opts[:'limit_payment_all'].nil?
      query_params[:'paymentDailyLimit'] = opts[:'payment_daily_limit'] if !opts[:'payment_daily_limit'].nil?
      query_params[:'pin'] = opts[:'pin'] if !opts[:'pin'].nil?
      query_params[:'anonymous'] = opts[:'anonymous'] if !opts[:'anonymous'].nil?
      query_params[:'sendToParent'] = opts[:'send_to_parent'] if !opts[:'send_to_parent'].nil?
      query_params[:'mccRestrictionGroupId'] = opts[:'mcc_restriction_group_id'] if !opts[:'mcc_restriction_group_id'].nil?
      query_params[:'merchantRestrictionGroupId'] = opts[:'merchant_restriction_group_id'] if !opts[:'merchant_restriction_group_id'].nil?
      query_params[:'countryRestrictionGroupId'] = opts[:'country_restriction_group_id'] if !opts[:'country_restriction_group_id'].nil?
      query_params[:'accessTag'] = opts[:'access_tag'] if !opts[:'access_tag'].nil?
      query_params[:'accessUserId'] = opts[:'access_user_id'] if !opts[:'access_user_id'].nil?
      query_params[:'accessUserIp'] = opts[:'access_user_ip'] if !opts[:'access_user_ip'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2005')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardApi#cards_create_virtual_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # search cards
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_signature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
    # @option opts [String] :access_tag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
    # @option opts [Integer] :access_user_id Access user&#39;s id is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @option opts [String] :access_user_ip Access user&#39;s ip is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @option opts [Integer] :card_id Card&#39;s id
    # @option opts [Integer] :user_id User&#39;s id of cardholder
    # @option opts [String] :embossed_name Embossed name of the card
    # @option opts [String] :public_token Public token of the card
    # @option opts [String] :perms_group Permissions group of the card. There is 4 usages which create 16 possible groups:  | group | NFC | ATM | On-line | Foreign | |-----|-----|-----|-----|------| |TRZ-CU-001|KO|KO|KO|KO| |TRZ-CU-002|KO|KO|KO|OK| |TRZ-CU-003|KO|KO|OK|KO| |TRZ-CU-004|KO|KO|OK|OK| |TRZ-CU-005|KO|OK|KO|KO| |TRZ-CU-006|KO|OK|KO|OK| |TRZ-CU-007|KO|OK|OK|KO| |TRZ-CU-008|KO|OK|OK|OK| |TRZ-CU-009|OK|KO|KO|KO| |TRZ-CU-010|OK|KO|KO|OK| |TRZ-CU-011|OK|KO|OK|KO| |TRZ-CU-012|OK|KO|OK|OK| |TRZ-CU-013|OK|OK|KO|KO| |TRZ-CU-014|OK|OK|KO|OK| |TRZ-CU-015|OK|OK|OK|KO| |TRZ-CU-016|OK|OK|OK|OK| 
    # @option opts [Integer] :is_physical | Value | Type | | --- | --- | | 1 | Physical card| | 0 | Virtual card | 
    # @option opts [Integer] :is_converted | Value | Type | | --- | --- | | 1 | Physical card converted in a virtual card| | 0 | Not converted | 
    # @option opts [Integer] :lock_status | Value | Type | | --- | --- | | 1 | Card blocked | | 0 | Card Unblocked | | 2 | Lost card | | 3 | Stolen card | 
    # @option opts [Integer] :mcc_restriction_group_id mccRestrictionGroupId of the card
    # @option opts [Integer] :merchant_restriction_group_id merchantRestrictionGroupId of the card
    # @option opts [Integer] :country_restriction_group_id countryRestrictionGroupId of the card
    # @option opts [Integer] :page_number Pagination page number. More info [here](https://agent.treezor.com/lists). 
    # @option opts [Integer] :page_count The number of items per page. More info [here](https://agent.treezor.com/lists). 
    # @option opts [String] :sort_by The transaction element you want to sort the list with. Default value : _createdDate_. More info [here](https://agent.treezor.com/lists). 
    # @option opts [String] :sort_order The order you want to sort the list. * **DESC** for a descending sort * **ASC** for a ascending sort.  Default value : DESC. More info [here](https://agent.treezor.com/lists). 
    # @option opts [DateTime] :created_date_from The creation date from which you want to filter the request result. Format YYYY-MM-DD HH:MM:SS. More info [here](https://agent.treezor.com/lists) 
    # @option opts [DateTime] :created_date_to The creation date up to which you want to filter the request result. Format YYYY-MM-DD HH:MM:SS. More info [here](https://agent.treezor.com/lists) 
    # @option opts [DateTime] :updated_date_from The modification date from which you want to filter the request result. Format YYYY-MM-DD HH:MM:SS. More info [here](https://agent.treezor.com/lists) 
    # @option opts [DateTime] :updated_date_to The modification date up to which you want to filter the request result. Format YYYY-MM-DD HH:MM:SS. More info [here](https://agent.treezor.com/lists) 
    # @return [InlineResponse2005]
    def cards_get(opts = {})
      data, _status_code, _headers = cards_get_with_http_info(opts)
      data
    end

    # search cards
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_signature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
    # @option opts [String] :access_tag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
    # @option opts [Integer] :access_user_id Access user&#39;s id is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @option opts [String] :access_user_ip Access user&#39;s ip is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @option opts [Integer] :card_id Card&#39;s id
    # @option opts [Integer] :user_id User&#39;s id of cardholder
    # @option opts [String] :embossed_name Embossed name of the card
    # @option opts [String] :public_token Public token of the card
    # @option opts [String] :perms_group Permissions group of the card. There is 4 usages which create 16 possible groups:  | group | NFC | ATM | On-line | Foreign | |-----|-----|-----|-----|------| |TRZ-CU-001|KO|KO|KO|KO| |TRZ-CU-002|KO|KO|KO|OK| |TRZ-CU-003|KO|KO|OK|KO| |TRZ-CU-004|KO|KO|OK|OK| |TRZ-CU-005|KO|OK|KO|KO| |TRZ-CU-006|KO|OK|KO|OK| |TRZ-CU-007|KO|OK|OK|KO| |TRZ-CU-008|KO|OK|OK|OK| |TRZ-CU-009|OK|KO|KO|KO| |TRZ-CU-010|OK|KO|KO|OK| |TRZ-CU-011|OK|KO|OK|KO| |TRZ-CU-012|OK|KO|OK|OK| |TRZ-CU-013|OK|OK|KO|KO| |TRZ-CU-014|OK|OK|KO|OK| |TRZ-CU-015|OK|OK|OK|KO| |TRZ-CU-016|OK|OK|OK|OK| 
    # @option opts [Integer] :is_physical | Value | Type | | --- | --- | | 1 | Physical card| | 0 | Virtual card | 
    # @option opts [Integer] :is_converted | Value | Type | | --- | --- | | 1 | Physical card converted in a virtual card| | 0 | Not converted | 
    # @option opts [Integer] :lock_status | Value | Type | | --- | --- | | 1 | Card blocked | | 0 | Card Unblocked | | 2 | Lost card | | 3 | Stolen card | 
    # @option opts [Integer] :mcc_restriction_group_id mccRestrictionGroupId of the card
    # @option opts [Integer] :merchant_restriction_group_id merchantRestrictionGroupId of the card
    # @option opts [Integer] :country_restriction_group_id countryRestrictionGroupId of the card
    # @option opts [Integer] :page_number Pagination page number. More info [here](https://agent.treezor.com/lists). 
    # @option opts [Integer] :page_count The number of items per page. More info [here](https://agent.treezor.com/lists). 
    # @option opts [String] :sort_by The transaction element you want to sort the list with. Default value : _createdDate_. More info [here](https://agent.treezor.com/lists). 
    # @option opts [String] :sort_order The order you want to sort the list. * **DESC** for a descending sort * **ASC** for a ascending sort.  Default value : DESC. More info [here](https://agent.treezor.com/lists). 
    # @option opts [DateTime] :created_date_from The creation date from which you want to filter the request result. Format YYYY-MM-DD HH:MM:SS. More info [here](https://agent.treezor.com/lists) 
    # @option opts [DateTime] :created_date_to The creation date up to which you want to filter the request result. Format YYYY-MM-DD HH:MM:SS. More info [here](https://agent.treezor.com/lists) 
    # @option opts [DateTime] :updated_date_from The modification date from which you want to filter the request result. Format YYYY-MM-DD HH:MM:SS. More info [here](https://agent.treezor.com/lists) 
    # @option opts [DateTime] :updated_date_to The modification date up to which you want to filter the request result. Format YYYY-MM-DD HH:MM:SS. More info [here](https://agent.treezor.com/lists) 
    # @return [Array<(InlineResponse2005, Fixnum, Hash)>] InlineResponse2005 data, response status code and response headers
    def cards_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardApi.cards_get ...'
      end
      # resource path
      local_var_path = '/cards'

      # query parameters
      query_params = {}
      query_params[:'accessSignature'] = opts[:'access_signature'] if !opts[:'access_signature'].nil?
      query_params[:'accessTag'] = opts[:'access_tag'] if !opts[:'access_tag'].nil?
      query_params[:'accessUserId'] = opts[:'access_user_id'] if !opts[:'access_user_id'].nil?
      query_params[:'accessUserIp'] = opts[:'access_user_ip'] if !opts[:'access_user_ip'].nil?
      query_params[:'cardId'] = opts[:'card_id'] if !opts[:'card_id'].nil?
      query_params[:'userId'] = opts[:'user_id'] if !opts[:'user_id'].nil?
      query_params[:'embossedName'] = opts[:'embossed_name'] if !opts[:'embossed_name'].nil?
      query_params[:'publicToken'] = opts[:'public_token'] if !opts[:'public_token'].nil?
      query_params[:'permsGroup'] = opts[:'perms_group'] if !opts[:'perms_group'].nil?
      query_params[:'isPhysical'] = opts[:'is_physical'] if !opts[:'is_physical'].nil?
      query_params[:'isConverted'] = opts[:'is_converted'] if !opts[:'is_converted'].nil?
      query_params[:'lockStatus'] = opts[:'lock_status'] if !opts[:'lock_status'].nil?
      query_params[:'mccRestrictionGroupId'] = opts[:'mcc_restriction_group_id'] if !opts[:'mcc_restriction_group_id'].nil?
      query_params[:'merchantRestrictionGroupId'] = opts[:'merchant_restriction_group_id'] if !opts[:'merchant_restriction_group_id'].nil?
      query_params[:'countryRestrictionGroupId'] = opts[:'country_restriction_group_id'] if !opts[:'country_restriction_group_id'].nil?
      query_params[:'pageNumber'] = opts[:'page_number'] if !opts[:'page_number'].nil?
      query_params[:'pageCount'] = opts[:'page_count'] if !opts[:'page_count'].nil?
      query_params[:'sortBy'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'sortOrder'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?
      query_params[:'createdDateFrom'] = opts[:'created_date_from'] if !opts[:'created_date_from'].nil?
      query_params[:'createdDateTo'] = opts[:'created_date_to'] if !opts[:'created_date_to'].nil?
      query_params[:'updatedDateFrom'] = opts[:'updated_date_from'] if !opts[:'updated_date_from'].nil?
      query_params[:'updatedDateTo'] = opts[:'updated_date_to'] if !opts[:'updated_date_to'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2005')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardApi#cards_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # activate a card
    # The Activate endpoint change card status to activate. An activated card can be freely used. 
    # @param id Card&#39;s id.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_token Access token must be defined here or in Authorization HTTP header. More info [here](https://agent.treezor.com/security-authentication). 
    # @option opts [String] :access_signature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
    # @option opts [String] :access_tag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
    # @option opts [Integer] :access_user_id Access user&#39;s id is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @option opts [String] :access_user_ip Access user&#39;s ip is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @return [InlineResponse2005]
    def cards_id_activate_put(id, opts = {})
      data, _status_code, _headers = cards_id_activate_put_with_http_info(id, opts)
      data
    end

    # activate a card
    # The Activate endpoint change card status to activate. An activated card can be freely used. 
    # @param id Card&#39;s id.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_token Access token must be defined here or in Authorization HTTP header. More info [here](https://agent.treezor.com/security-authentication). 
    # @option opts [String] :access_signature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
    # @option opts [String] :access_tag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
    # @option opts [Integer] :access_user_id Access user&#39;s id is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @option opts [String] :access_user_ip Access user&#39;s ip is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @return [Array<(InlineResponse2005, Fixnum, Hash)>] InlineResponse2005 data, response status code and response headers
    def cards_id_activate_put_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardApi.cards_id_activate_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CardApi.cards_id_activate_put"
      end
      # resource path
      local_var_path = '/cards/{id}/Activate/'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'accessToken'] = opts[:'access_token'] if !opts[:'access_token'].nil?
      query_params[:'accessSignature'] = opts[:'access_signature'] if !opts[:'access_signature'].nil?
      query_params[:'accessTag'] = opts[:'access_tag'] if !opts[:'access_tag'].nil?
      query_params[:'accessUserId'] = opts[:'access_user_id'] if !opts[:'access_user_id'].nil?
      query_params[:'accessUserIp'] = opts[:'access_user_ip'] if !opts[:'access_user_ip'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2005')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardApi#cards_id_activate_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # change card's PIN
    # Change card's PIN code knowing the current one.
    # @param id Card&#39;s id.
    # @param current_pin Card&#39;s current PIN
    # @param new_pin Card&#39;s new PIN
    # @param confirm_pin Card&#39;s new PIN confirmation value
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_signature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
    # @option opts [String] :access_tag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
    # @option opts [Integer] :access_user_id Access user&#39;s id is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @option opts [String] :access_user_ip Access user&#39;s ip is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @return [InlineResponse2005]
    def cards_id_change_pin_put(id, current_pin, new_pin, confirm_pin, opts = {})
      data, _status_code, _headers = cards_id_change_pin_put_with_http_info(id, current_pin, new_pin, confirm_pin, opts)
      data
    end

    # change card&#39;s PIN
    # Change card&#39;s PIN code knowing the current one.
    # @param id Card&#39;s id.
    # @param current_pin Card&#39;s current PIN
    # @param new_pin Card&#39;s new PIN
    # @param confirm_pin Card&#39;s new PIN confirmation value
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_signature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
    # @option opts [String] :access_tag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
    # @option opts [Integer] :access_user_id Access user&#39;s id is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @option opts [String] :access_user_ip Access user&#39;s ip is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @return [Array<(InlineResponse2005, Fixnum, Hash)>] InlineResponse2005 data, response status code and response headers
    def cards_id_change_pin_put_with_http_info(id, current_pin, new_pin, confirm_pin, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardApi.cards_id_change_pin_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CardApi.cards_id_change_pin_put"
      end
      # verify the required parameter 'current_pin' is set
      if @api_client.config.client_side_validation && current_pin.nil?
        fail ArgumentError, "Missing the required parameter 'current_pin' when calling CardApi.cards_id_change_pin_put"
      end
      # verify the required parameter 'new_pin' is set
      if @api_client.config.client_side_validation && new_pin.nil?
        fail ArgumentError, "Missing the required parameter 'new_pin' when calling CardApi.cards_id_change_pin_put"
      end
      # verify the required parameter 'confirm_pin' is set
      if @api_client.config.client_side_validation && confirm_pin.nil?
        fail ArgumentError, "Missing the required parameter 'confirm_pin' when calling CardApi.cards_id_change_pin_put"
      end
      # resource path
      local_var_path = '/cards/{id}/ChangePIN/'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'currentPIN'] = current_pin
      query_params[:'newPIN'] = new_pin
      query_params[:'confirmPIN'] = confirm_pin
      query_params[:'accessSignature'] = opts[:'access_signature'] if !opts[:'access_signature'].nil?
      query_params[:'accessTag'] = opts[:'access_tag'] if !opts[:'access_tag'].nil?
      query_params[:'accessUserId'] = opts[:'access_user_id'] if !opts[:'access_user_id'].nil?
      query_params[:'accessUserIp'] = opts[:'access_user_ip'] if !opts[:'access_user_ip'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2005')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardApi#cards_id_change_pin_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # convert card to virtual
    # Convert a virtual card into a physical one. The converted card will be both virtual and physical. 
    # @param id Card&#39;s id.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_signature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
    # @option opts [String] :access_tag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
    # @option opts [Integer] :access_user_id Access user&#39;s id is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @option opts [String] :access_user_ip Access user&#39;s ip is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @return [InlineResponse2005]
    def cards_id_convert_virtual_put(id, opts = {})
      data, _status_code, _headers = cards_id_convert_virtual_put_with_http_info(id, opts)
      data
    end

    # convert card to virtual
    # Convert a virtual card into a physical one. The converted card will be both virtual and physical. 
    # @param id Card&#39;s id.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_signature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
    # @option opts [String] :access_tag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
    # @option opts [Integer] :access_user_id Access user&#39;s id is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @option opts [String] :access_user_ip Access user&#39;s ip is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @return [Array<(InlineResponse2005, Fixnum, Hash)>] InlineResponse2005 data, response status code and response headers
    def cards_id_convert_virtual_put_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardApi.cards_id_convert_virtual_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CardApi.cards_id_convert_virtual_put"
      end
      # resource path
      local_var_path = '/cards/{id}/ConvertVirtual/'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'accessSignature'] = opts[:'access_signature'] if !opts[:'access_signature'].nil?
      query_params[:'accessTag'] = opts[:'access_tag'] if !opts[:'access_tag'].nil?
      query_params[:'accessUserId'] = opts[:'access_user_id'] if !opts[:'access_user_id'].nil?
      query_params[:'accessUserIp'] = opts[:'access_user_ip'] if !opts[:'access_user_ip'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2005')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardApi#cards_id_convert_virtual_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # get a card
    # @param id Card&#39;s id.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2005]
    def cards_id_get(id, opts = {})
      data, _status_code, _headers = cards_id_get_with_http_info(id, opts)
      data
    end

    # get a card
    # @param id Card&#39;s id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2005, Fixnum, Hash)>] InlineResponse2005 data, response status code and response headers
    def cards_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardApi.cards_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CardApi.cards_id_get"
      end
      # resource path
      local_var_path = '/cards/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2005')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardApi#cards_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # update card's limits
    # Update of the card limits.
    # @param id Card&#39;s id.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_signature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
    # @option opts [Integer] :limit_atm_year ATM year limit
    # @option opts [Integer] :limit_atm_month ATM month limit
    # @option opts [Integer] :limit_atm_week ATM week limit
    # @option opts [Integer] :limit_atm_day ATM day limit
    # @option opts [Integer] :limit_atm_all ATM from beginning limit
    # @option opts [Integer] :limit_payment_year Payment year limit
    # @option opts [Integer] :limit_payment_month Payment month limit
    # @option opts [Integer] :limit_payment_week Payment week limit
    # @option opts [Integer] :limit_payment_day Payment day limit
    # @option opts [Integer] :limit_payment_all Payment from beginning limit
    # @option opts [Float] :payment_daily_limit Payment day limit including cents. The decimal delimiter must be \&quot;.\&quot;
    # @option opts [String] :access_tag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
    # @option opts [Integer] :access_user_id Access user&#39;s id is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @option opts [String] :access_user_ip Access user&#39;s ip is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @return [InlineResponse2005]
    def cards_id_limits_put(id, opts = {})
      data, _status_code, _headers = cards_id_limits_put_with_http_info(id, opts)
      data
    end

    # update card&#39;s limits
    # Update of the card limits.
    # @param id Card&#39;s id.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_signature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
    # @option opts [Integer] :limit_atm_year ATM year limit
    # @option opts [Integer] :limit_atm_month ATM month limit
    # @option opts [Integer] :limit_atm_week ATM week limit
    # @option opts [Integer] :limit_atm_day ATM day limit
    # @option opts [Integer] :limit_atm_all ATM from beginning limit
    # @option opts [Integer] :limit_payment_year Payment year limit
    # @option opts [Integer] :limit_payment_month Payment month limit
    # @option opts [Integer] :limit_payment_week Payment week limit
    # @option opts [Integer] :limit_payment_day Payment day limit
    # @option opts [Integer] :limit_payment_all Payment from beginning limit
    # @option opts [Float] :payment_daily_limit Payment day limit including cents. The decimal delimiter must be \&quot;.\&quot;
    # @option opts [String] :access_tag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
    # @option opts [Integer] :access_user_id Access user&#39;s id is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @option opts [String] :access_user_ip Access user&#39;s ip is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @return [Array<(InlineResponse2005, Fixnum, Hash)>] InlineResponse2005 data, response status code and response headers
    def cards_id_limits_put_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardApi.cards_id_limits_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CardApi.cards_id_limits_put"
      end
      # resource path
      local_var_path = '/cards/{id}/Limits/'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'accessSignature'] = opts[:'access_signature'] if !opts[:'access_signature'].nil?
      query_params[:'limitAtmYear'] = opts[:'limit_atm_year'] if !opts[:'limit_atm_year'].nil?
      query_params[:'limitAtmMonth'] = opts[:'limit_atm_month'] if !opts[:'limit_atm_month'].nil?
      query_params[:'limitAtmWeek'] = opts[:'limit_atm_week'] if !opts[:'limit_atm_week'].nil?
      query_params[:'limitAtmDay'] = opts[:'limit_atm_day'] if !opts[:'limit_atm_day'].nil?
      query_params[:'limitAtmAll'] = opts[:'limit_atm_all'] if !opts[:'limit_atm_all'].nil?
      query_params[:'limitPaymentYear'] = opts[:'limit_payment_year'] if !opts[:'limit_payment_year'].nil?
      query_params[:'limitPaymentMonth'] = opts[:'limit_payment_month'] if !opts[:'limit_payment_month'].nil?
      query_params[:'limitPaymentWeek'] = opts[:'limit_payment_week'] if !opts[:'limit_payment_week'].nil?
      query_params[:'limitPaymentDay'] = opts[:'limit_payment_day'] if !opts[:'limit_payment_day'].nil?
      query_params[:'limitPaymentAll'] = opts[:'limit_payment_all'] if !opts[:'limit_payment_all'].nil?
      query_params[:'paymentDailyLimit'] = opts[:'payment_daily_limit'] if !opts[:'payment_daily_limit'].nil?
      query_params[:'accessTag'] = opts[:'access_tag'] if !opts[:'access_tag'].nil?
      query_params[:'accessUserId'] = opts[:'access_user_id'] if !opts[:'access_user_id'].nil?
      query_params[:'accessUserIp'] = opts[:'access_user_ip'] if !opts[:'access_user_ip'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2005')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardApi#cards_id_limits_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # update card's blocking status
    # Block or unblock a card.
    # @param id Card&#39;s id.
    # @param lock_status | Value | Type | | --- | --- | | 1 | Block the card| | 0 | Unblock the card | | 2 | Lost card | | 3 | Stolen card | 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_signature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
    # @option opts [String] :access_tag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
    # @option opts [Integer] :access_user_id Access user&#39;s id is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @option opts [String] :access_user_ip Access user&#39;s ip is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @return [InlineResponse2005]
    def cards_id_lock_unlock_put(id, lock_status, opts = {})
      data, _status_code, _headers = cards_id_lock_unlock_put_with_http_info(id, lock_status, opts)
      data
    end

    # update card&#39;s blocking status
    # Block or unblock a card.
    # @param id Card&#39;s id.
    # @param lock_status | Value | Type | | --- | --- | | 1 | Block the card| | 0 | Unblock the card | | 2 | Lost card | | 3 | Stolen card | 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_signature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
    # @option opts [String] :access_tag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
    # @option opts [Integer] :access_user_id Access user&#39;s id is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @option opts [String] :access_user_ip Access user&#39;s ip is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @return [Array<(InlineResponse2005, Fixnum, Hash)>] InlineResponse2005 data, response status code and response headers
    def cards_id_lock_unlock_put_with_http_info(id, lock_status, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardApi.cards_id_lock_unlock_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CardApi.cards_id_lock_unlock_put"
      end
      # verify the required parameter 'lock_status' is set
      if @api_client.config.client_side_validation && lock_status.nil?
        fail ArgumentError, "Missing the required parameter 'lock_status' when calling CardApi.cards_id_lock_unlock_put"
      end
      # resource path
      local_var_path = '/cards/{id}/LockUnlock/'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'lockStatus'] = lock_status
      query_params[:'accessSignature'] = opts[:'access_signature'] if !opts[:'access_signature'].nil?
      query_params[:'accessTag'] = opts[:'access_tag'] if !opts[:'access_tag'].nil?
      query_params[:'accessUserId'] = opts[:'access_user_id'] if !opts[:'access_user_id'].nil?
      query_params[:'accessUserIp'] = opts[:'access_user_ip'] if !opts[:'access_user_ip'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2005')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardApi#cards_id_lock_unlock_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # update card's options
    # Allows to update card's permission group.
    # @param id Card&#39;s id.
    # @param foreign Card usable abroad
    # @param online Card usable on-line
    # @param atm Card usable on ATM (withdrawals)
    # @param nfc Card usable on contactless compatible POS machine machine\&quot;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_signature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
    # @option opts [String] :access_tag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
    # @option opts [Integer] :access_user_id Access user&#39;s id is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @option opts [String] :access_user_ip Access user&#39;s ip is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @return [InlineResponse2005]
    def cards_id_options_put(id, foreign, online, atm, nfc, opts = {})
      data, _status_code, _headers = cards_id_options_put_with_http_info(id, foreign, online, atm, nfc, opts)
      data
    end

    # update card&#39;s options
    # Allows to update card&#39;s permission group.
    # @param id Card&#39;s id.
    # @param foreign Card usable abroad
    # @param online Card usable on-line
    # @param atm Card usable on ATM (withdrawals)
    # @param nfc Card usable on contactless compatible POS machine machine\&quot;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_signature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
    # @option opts [String] :access_tag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
    # @option opts [Integer] :access_user_id Access user&#39;s id is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @option opts [String] :access_user_ip Access user&#39;s ip is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @return [Array<(InlineResponse2005, Fixnum, Hash)>] InlineResponse2005 data, response status code and response headers
    def cards_id_options_put_with_http_info(id, foreign, online, atm, nfc, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardApi.cards_id_options_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CardApi.cards_id_options_put"
      end
      # verify the required parameter 'foreign' is set
      if @api_client.config.client_side_validation && foreign.nil?
        fail ArgumentError, "Missing the required parameter 'foreign' when calling CardApi.cards_id_options_put"
      end
      # verify the required parameter 'online' is set
      if @api_client.config.client_side_validation && online.nil?
        fail ArgumentError, "Missing the required parameter 'online' when calling CardApi.cards_id_options_put"
      end
      # verify the required parameter 'atm' is set
      if @api_client.config.client_side_validation && atm.nil?
        fail ArgumentError, "Missing the required parameter 'atm' when calling CardApi.cards_id_options_put"
      end
      # verify the required parameter 'nfc' is set
      if @api_client.config.client_side_validation && nfc.nil?
        fail ArgumentError, "Missing the required parameter 'nfc' when calling CardApi.cards_id_options_put"
      end
      # resource path
      local_var_path = '/cards/{id}/Options/'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'foreign'] = foreign
      query_params[:'online'] = online
      query_params[:'atm'] = atm
      query_params[:'nfc'] = nfc
      query_params[:'accessSignature'] = opts[:'access_signature'] if !opts[:'access_signature'].nil?
      query_params[:'accessTag'] = opts[:'access_tag'] if !opts[:'access_tag'].nil?
      query_params[:'accessUserId'] = opts[:'access_user_id'] if !opts[:'access_user_id'].nil?
      query_params[:'accessUserIp'] = opts[:'access_user_ip'] if !opts[:'access_user_ip'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2005')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardApi#cards_id_options_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # update card informations
    # Actually update mccRestrictionGroupId and merchantRestrictionGroupId of a card
    # @param id Card&#39;s id.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_signature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
    # @option opts [Integer] :mcc_restriction_group_id card&#39;s mccRestrictionGroupId
    # @option opts [Integer] :merchant_restriction_group_id card&#39;s merchantRestrictionGroupId
    # @option opts [Integer] :country_restriction_group_id card&#39;s countryRestrictionGroupId
    # @option opts [String] :access_tag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
    # @option opts [Integer] :access_user_id Access user&#39;s id is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @option opts [String] :access_user_ip Access user&#39;s ip is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @return [InlineResponse2005]
    def cards_id_put(id, opts = {})
      data, _status_code, _headers = cards_id_put_with_http_info(id, opts)
      data
    end

    # update card informations
    # Actually update mccRestrictionGroupId and merchantRestrictionGroupId of a card
    # @param id Card&#39;s id.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_signature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
    # @option opts [Integer] :mcc_restriction_group_id card&#39;s mccRestrictionGroupId
    # @option opts [Integer] :merchant_restriction_group_id card&#39;s merchantRestrictionGroupId
    # @option opts [Integer] :country_restriction_group_id card&#39;s countryRestrictionGroupId
    # @option opts [String] :access_tag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
    # @option opts [Integer] :access_user_id Access user&#39;s id is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @option opts [String] :access_user_ip Access user&#39;s ip is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @return [Array<(InlineResponse2005, Fixnum, Hash)>] InlineResponse2005 data, response status code and response headers
    def cards_id_put_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardApi.cards_id_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CardApi.cards_id_put"
      end
      # resource path
      local_var_path = '/cards/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'accessSignature'] = opts[:'access_signature'] if !opts[:'access_signature'].nil?
      query_params[:'mccRestrictionGroupId'] = opts[:'mcc_restriction_group_id'] if !opts[:'mcc_restriction_group_id'].nil?
      query_params[:'merchantRestrictionGroupId'] = opts[:'merchant_restriction_group_id'] if !opts[:'merchant_restriction_group_id'].nil?
      query_params[:'countryRestrictionGroupId'] = opts[:'country_restriction_group_id'] if !opts[:'country_restriction_group_id'].nil?
      query_params[:'accessTag'] = opts[:'access_tag'] if !opts[:'access_tag'].nil?
      query_params[:'accessUserId'] = opts[:'access_user_id'] if !opts[:'access_user_id'].nil?
      query_params[:'accessUserIp'] = opts[:'access_user_ip'] if !opts[:'access_user_ip'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2005')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardApi#cards_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # regenerate card
    # If card is Lost or Stolen (card's status), the card itself will get regenerated. Otherwise only the card image gets recreated. 
    # @param id Card&#39;s id.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_signature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
    # @option opts [String] :access_tag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
    # @option opts [Integer] :access_user_id Access user&#39;s id is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @option opts [String] :access_user_ip Access user&#39;s ip is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @return [InlineResponse2005]
    def cards_id_regenerate_put(id, opts = {})
      data, _status_code, _headers = cards_id_regenerate_put_with_http_info(id, opts)
      data
    end

    # regenerate card
    # If card is Lost or Stolen (card&#39;s status), the card itself will get regenerated. Otherwise only the card image gets recreated. 
    # @param id Card&#39;s id.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_signature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
    # @option opts [String] :access_tag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
    # @option opts [Integer] :access_user_id Access user&#39;s id is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @option opts [String] :access_user_ip Access user&#39;s ip is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @return [Array<(InlineResponse2005, Fixnum, Hash)>] InlineResponse2005 data, response status code and response headers
    def cards_id_regenerate_put_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardApi.cards_id_regenerate_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CardApi.cards_id_regenerate_put"
      end
      # resource path
      local_var_path = '/cards/{id}/Regenerate/'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'accessSignature'] = opts[:'access_signature'] if !opts[:'access_signature'].nil?
      query_params[:'accessTag'] = opts[:'access_tag'] if !opts[:'access_tag'].nil?
      query_params[:'accessUserId'] = opts[:'access_user_id'] if !opts[:'access_user_id'].nil?
      query_params[:'accessUserIp'] = opts[:'access_user_ip'] if !opts[:'access_user_ip'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2005')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardApi#cards_id_regenerate_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # set card's PIN
    # Overwrite card's PIN.
    # @param id Card&#39;s id.
    # @param new_pin Card&#39;s new PIN.
    # @param confirm_pin Card&#39;s new PIN confirmation value
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_signature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
    # @option opts [String] :access_tag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
    # @option opts [Integer] :access_user_id Access user&#39;s id is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @option opts [String] :access_user_ip Access user&#39;s ip is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @return [InlineResponse2005]
    def cards_id_set_pin_put(id, new_pin, confirm_pin, opts = {})
      data, _status_code, _headers = cards_id_set_pin_put_with_http_info(id, new_pin, confirm_pin, opts)
      data
    end

    # set card&#39;s PIN
    # Overwrite card&#39;s PIN.
    # @param id Card&#39;s id.
    # @param new_pin Card&#39;s new PIN.
    # @param confirm_pin Card&#39;s new PIN confirmation value
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_signature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
    # @option opts [String] :access_tag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
    # @option opts [Integer] :access_user_id Access user&#39;s id is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @option opts [String] :access_user_ip Access user&#39;s ip is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @return [Array<(InlineResponse2005, Fixnum, Hash)>] InlineResponse2005 data, response status code and response headers
    def cards_id_set_pin_put_with_http_info(id, new_pin, confirm_pin, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardApi.cards_id_set_pin_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CardApi.cards_id_set_pin_put"
      end
      # verify the required parameter 'new_pin' is set
      if @api_client.config.client_side_validation && new_pin.nil?
        fail ArgumentError, "Missing the required parameter 'new_pin' when calling CardApi.cards_id_set_pin_put"
      end
      # verify the required parameter 'confirm_pin' is set
      if @api_client.config.client_side_validation && confirm_pin.nil?
        fail ArgumentError, "Missing the required parameter 'confirm_pin' when calling CardApi.cards_id_set_pin_put"
      end
      # resource path
      local_var_path = '/cards/{id}/setPIN/'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'newPIN'] = new_pin
      query_params[:'confirmPIN'] = confirm_pin
      query_params[:'accessSignature'] = opts[:'access_signature'] if !opts[:'access_signature'].nil?
      query_params[:'accessTag'] = opts[:'access_tag'] if !opts[:'access_tag'].nil?
      query_params[:'accessUserId'] = opts[:'access_user_id'] if !opts[:'access_user_id'].nil?
      query_params[:'accessUserIp'] = opts[:'access_user_ip'] if !opts[:'access_user_ip'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2005')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardApi#cards_id_set_pin_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # unblock card's PIN
    # Unblock card's PIN code.
    # @param id Card&#39;s id.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_signature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
    # @option opts [String] :access_tag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
    # @option opts [Integer] :access_user_id Access user&#39;s id is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @option opts [String] :access_user_ip Access user&#39;s ip is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @return [InlineResponse2005]
    def cards_id_unblock_pin_put(id, opts = {})
      data, _status_code, _headers = cards_id_unblock_pin_put_with_http_info(id, opts)
      data
    end

    # unblock card&#39;s PIN
    # Unblock card&#39;s PIN code.
    # @param id Card&#39;s id.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_signature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
    # @option opts [String] :access_tag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
    # @option opts [Integer] :access_user_id Access user&#39;s id is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @option opts [String] :access_user_ip Access user&#39;s ip is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @return [Array<(InlineResponse2005, Fixnum, Hash)>] InlineResponse2005 data, response status code and response headers
    def cards_id_unblock_pin_put_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardApi.cards_id_unblock_pin_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CardApi.cards_id_unblock_pin_put"
      end
      # resource path
      local_var_path = '/cards/{id}/UnblockPIN/'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'accessSignature'] = opts[:'access_signature'] if !opts[:'access_signature'].nil?
      query_params[:'accessTag'] = opts[:'access_tag'] if !opts[:'access_tag'].nil?
      query_params[:'accessUserId'] = opts[:'access_user_id'] if !opts[:'access_user_id'].nil?
      query_params[:'accessUserIp'] = opts[:'access_user_ip'] if !opts[:'access_user_ip'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2005')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardApi#cards_id_unblock_pin_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Register 3D secure
    # Register a card to 3D secure service. The user's mobile number must begin by \"+\", or \"00\", and the country dialing code.
    # @param card_id Card&#39;s ID to register
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_signature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication).
    # @return [InlineResponse2005]
    def cards_register3_ds_post(card_id, opts = {})
      data, _status_code, _headers = cards_register3_ds_post_with_http_info(card_id, opts)
      data
    end

    # Register 3D secure
    # Register a card to 3D secure service. The user&#39;s mobile number must begin by \&quot;+\&quot;, or \&quot;00\&quot;, and the country dialing code.
    # @param card_id Card&#39;s ID to register
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_signature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication).
    # @return [Array<(InlineResponse2005, Fixnum, Hash)>] InlineResponse2005 data, response status code and response headers
    def cards_register3_ds_post_with_http_info(card_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardApi.cards_register3_ds_post ...'
      end
      # verify the required parameter 'card_id' is set
      if @api_client.config.client_side_validation && card_id.nil?
        fail ArgumentError, "Missing the required parameter 'card_id' when calling CardApi.cards_register3_ds_post"
      end
      # resource path
      local_var_path = '/cards/Register3DS'

      # query parameters
      query_params = {}
      query_params[:'cardId'] = card_id
      query_params[:'accessSignature'] = opts[:'access_signature'] if !opts[:'access_signature'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2005')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardApi#cards_register3_ds_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # create a physical card
    # Create a new physical card. To use a card you will need to activate it (/cards/{id}/Activate/).
    # @param user_id User&#39;s id of cardholder
    # @param wallet_id Wallet&#39;s Id in which to create the card
    # @param perms_group Permissions group of the card. There is 4 usages which create 16 possible groups:  | group | NFC | ATM | On-line | Foreign | |-----|-----|-----|-----|------| |TRZ-CU-001|KO|KO|KO|KO| |TRZ-CU-002|KO|KO|KO|OK| |TRZ-CU-003|KO|KO|OK|KO| |TRZ-CU-004|KO|KO|OK|OK| |TRZ-CU-005|KO|OK|KO|KO| |TRZ-CU-006|KO|OK|KO|OK| |TRZ-CU-007|KO|OK|OK|KO| |TRZ-CU-008|KO|OK|OK|OK| |TRZ-CU-009|OK|KO|KO|KO| |TRZ-CU-010|OK|KO|KO|OK| |TRZ-CU-011|OK|KO|OK|KO| |TRZ-CU-012|OK|KO|OK|OK| |TRZ-CU-013|OK|OK|KO|KO| |TRZ-CU-014|OK|OK|KO|OK| |TRZ-CU-015|OK|OK|OK|KO| |TRZ-CU-016|OK|OK|OK|OK| 
    # @param card_tag Custom field
    # @param card_print Card appearance code, also used to choose the program ID of the card
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_signature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
    # @option opts [Integer] :batch_delivery_id Batch regroupement identifier (must be between 1 and 238327) NOT YET OPERATIONAL
    # @option opts [Integer] :limit_atm_year ATM operations limit for a sliding year. No default value.
    # @option opts [Integer] :limit_atm_month ATM operations limit for a sliding month. No default value.
    # @option opts [Integer] :limit_atm_week ATM operations limit for a sliding week. Default value 2000Ã¢â€šÂ¬.
    # @option opts [Integer] :limit_atm_day ATM operations limit for a single day. Default value 1000Ã¢â€šÂ¬.
    # @option opts [Integer] :limit_atm_all ATM operations limit from beginning. No default value.
    # @option opts [Integer] :limit_payment_year POS operations limit for a sliding year. No default value.
    # @option opts [Integer] :limit_payment_month POS operations limit for a sliding month. No default value.
    # @option opts [Integer] :limit_payment_week POS operations limit for a sliding week. Default value 3000Ã¢â€šÂ¬.
    # @option opts [Integer] :limit_payment_day POS operations limit for a single day. Default value 2000Ã¢â€šÂ¬.
    # @option opts [Integer] :limit_payment_all POS operations limit from beginning. No default value.
    # @option opts [Float] :payment_daily_limit POS operations limit for a single day including cents. The decimal delimiter must be \&quot;.\&quot;. No default value.
    # @option opts [String] :pin Card&#39;s PIN code value. Default random PIN.
    # @option opts [Integer] :anonymous Card is anonymous. If value is 1 there will be no embossed name.
    # @option opts [Integer] :send_to_parent If you put the value 1 the delivery address will be the parent user&#39;s.
    # @option opts [Integer] :mcc_restriction_group_id mccRestrictionGroupId you want to apply
    # @option opts [Integer] :merchant_restriction_group_id merchantRestrictionGroupId you want to apply
    # @option opts [Integer] :country_restriction_group_id countryRestrictionGroupId you want to apply
    # @option opts [String] :access_tag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
    # @option opts [Integer] :access_user_id Access user&#39;s id is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @option opts [String] :access_user_ip Access user&#39;s ip is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @return [InlineResponse2005]
    def cards_request_physical_post(user_id, wallet_id, perms_group, card_tag, card_print, opts = {})
      data, _status_code, _headers = cards_request_physical_post_with_http_info(user_id, wallet_id, perms_group, card_tag, card_print, opts)
      data
    end

    # create a physical card
    # Create a new physical card. To use a card you will need to activate it (/cards/{id}/Activate/).
    # @param user_id User&#39;s id of cardholder
    # @param wallet_id Wallet&#39;s Id in which to create the card
    # @param perms_group Permissions group of the card. There is 4 usages which create 16 possible groups:  | group | NFC | ATM | On-line | Foreign | |-----|-----|-----|-----|------| |TRZ-CU-001|KO|KO|KO|KO| |TRZ-CU-002|KO|KO|KO|OK| |TRZ-CU-003|KO|KO|OK|KO| |TRZ-CU-004|KO|KO|OK|OK| |TRZ-CU-005|KO|OK|KO|KO| |TRZ-CU-006|KO|OK|KO|OK| |TRZ-CU-007|KO|OK|OK|KO| |TRZ-CU-008|KO|OK|OK|OK| |TRZ-CU-009|OK|KO|KO|KO| |TRZ-CU-010|OK|KO|KO|OK| |TRZ-CU-011|OK|KO|OK|KO| |TRZ-CU-012|OK|KO|OK|OK| |TRZ-CU-013|OK|OK|KO|KO| |TRZ-CU-014|OK|OK|KO|OK| |TRZ-CU-015|OK|OK|OK|KO| |TRZ-CU-016|OK|OK|OK|OK| 
    # @param card_tag Custom field
    # @param card_print Card appearance code, also used to choose the program ID of the card
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_signature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
    # @option opts [Integer] :batch_delivery_id Batch regroupement identifier (must be between 1 and 238327) NOT YET OPERATIONAL
    # @option opts [Integer] :limit_atm_year ATM operations limit for a sliding year. No default value.
    # @option opts [Integer] :limit_atm_month ATM operations limit for a sliding month. No default value.
    # @option opts [Integer] :limit_atm_week ATM operations limit for a sliding week. Default value 2000Ã¢â€šÂ¬.
    # @option opts [Integer] :limit_atm_day ATM operations limit for a single day. Default value 1000Ã¢â€šÂ¬.
    # @option opts [Integer] :limit_atm_all ATM operations limit from beginning. No default value.
    # @option opts [Integer] :limit_payment_year POS operations limit for a sliding year. No default value.
    # @option opts [Integer] :limit_payment_month POS operations limit for a sliding month. No default value.
    # @option opts [Integer] :limit_payment_week POS operations limit for a sliding week. Default value 3000Ã¢â€šÂ¬.
    # @option opts [Integer] :limit_payment_day POS operations limit for a single day. Default value 2000Ã¢â€šÂ¬.
    # @option opts [Integer] :limit_payment_all POS operations limit from beginning. No default value.
    # @option opts [Float] :payment_daily_limit POS operations limit for a single day including cents. The decimal delimiter must be \&quot;.\&quot;. No default value.
    # @option opts [String] :pin Card&#39;s PIN code value. Default random PIN.
    # @option opts [Integer] :anonymous Card is anonymous. If value is 1 there will be no embossed name.
    # @option opts [Integer] :send_to_parent If you put the value 1 the delivery address will be the parent user&#39;s.
    # @option opts [Integer] :mcc_restriction_group_id mccRestrictionGroupId you want to apply
    # @option opts [Integer] :merchant_restriction_group_id merchantRestrictionGroupId you want to apply
    # @option opts [Integer] :country_restriction_group_id countryRestrictionGroupId you want to apply
    # @option opts [String] :access_tag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
    # @option opts [Integer] :access_user_id Access user&#39;s id is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @option opts [String] :access_user_ip Access user&#39;s ip is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @return [Array<(InlineResponse2005, Fixnum, Hash)>] InlineResponse2005 data, response status code and response headers
    def cards_request_physical_post_with_http_info(user_id, wallet_id, perms_group, card_tag, card_print, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardApi.cards_request_physical_post ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling CardApi.cards_request_physical_post"
      end
      # verify the required parameter 'wallet_id' is set
      if @api_client.config.client_side_validation && wallet_id.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_id' when calling CardApi.cards_request_physical_post"
      end
      # verify the required parameter 'perms_group' is set
      if @api_client.config.client_side_validation && perms_group.nil?
        fail ArgumentError, "Missing the required parameter 'perms_group' when calling CardApi.cards_request_physical_post"
      end
      # verify the required parameter 'card_tag' is set
      if @api_client.config.client_side_validation && card_tag.nil?
        fail ArgumentError, "Missing the required parameter 'card_tag' when calling CardApi.cards_request_physical_post"
      end
      # verify the required parameter 'card_print' is set
      if @api_client.config.client_side_validation && card_print.nil?
        fail ArgumentError, "Missing the required parameter 'card_print' when calling CardApi.cards_request_physical_post"
      end
      # resource path
      local_var_path = '/cards/RequestPhysical'

      # query parameters
      query_params = {}
      query_params[:'userId'] = user_id
      query_params[:'walletId'] = wallet_id
      query_params[:'permsGroup'] = perms_group
      query_params[:'cardTag'] = card_tag
      query_params[:'cardPrint'] = card_print
      query_params[:'accessSignature'] = opts[:'access_signature'] if !opts[:'access_signature'].nil?
      query_params[:'batchDeliveryId'] = opts[:'batch_delivery_id'] if !opts[:'batch_delivery_id'].nil?
      query_params[:'limitAtmYear'] = opts[:'limit_atm_year'] if !opts[:'limit_atm_year'].nil?
      query_params[:'limitAtmMonth'] = opts[:'limit_atm_month'] if !opts[:'limit_atm_month'].nil?
      query_params[:'limitAtmWeek'] = opts[:'limit_atm_week'] if !opts[:'limit_atm_week'].nil?
      query_params[:'limitAtmDay'] = opts[:'limit_atm_day'] if !opts[:'limit_atm_day'].nil?
      query_params[:'limitAtmAll'] = opts[:'limit_atm_all'] if !opts[:'limit_atm_all'].nil?
      query_params[:'limitPaymentYear'] = opts[:'limit_payment_year'] if !opts[:'limit_payment_year'].nil?
      query_params[:'limitPaymentMonth'] = opts[:'limit_payment_month'] if !opts[:'limit_payment_month'].nil?
      query_params[:'limitPaymentWeek'] = opts[:'limit_payment_week'] if !opts[:'limit_payment_week'].nil?
      query_params[:'limitPaymentDay'] = opts[:'limit_payment_day'] if !opts[:'limit_payment_day'].nil?
      query_params[:'limitPaymentAll'] = opts[:'limit_payment_all'] if !opts[:'limit_payment_all'].nil?
      query_params[:'paymentDailyLimit'] = opts[:'payment_daily_limit'] if !opts[:'payment_daily_limit'].nil?
      query_params[:'pin'] = opts[:'pin'] if !opts[:'pin'].nil?
      query_params[:'anonymous'] = opts[:'anonymous'] if !opts[:'anonymous'].nil?
      query_params[:'sendToParent'] = opts[:'send_to_parent'] if !opts[:'send_to_parent'].nil?
      query_params[:'mccRestrictionGroupId'] = opts[:'mcc_restriction_group_id'] if !opts[:'mcc_restriction_group_id'].nil?
      query_params[:'merchantRestrictionGroupId'] = opts[:'merchant_restriction_group_id'] if !opts[:'merchant_restriction_group_id'].nil?
      query_params[:'countryRestrictionGroupId'] = opts[:'country_restriction_group_id'] if !opts[:'country_restriction_group_id'].nil?
      query_params[:'accessTag'] = opts[:'access_tag'] if !opts[:'access_tag'].nil?
      query_params[:'accessUserId'] = opts[:'access_user_id'] if !opts[:'access_user_id'].nil?
      query_params[:'accessUserIp'] = opts[:'access_user_ip'] if !opts[:'access_user_ip'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2005')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardApi#cards_request_physical_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
