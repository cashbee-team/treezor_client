=begin
#Treezor

#Treezor API.  more info [here](https://www.treezor.com). 

OpenAPI spec version: 0.1.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.19

=end

require 'uri'

module TreezorClient
  class UserTaxResidencesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete a residence
    # Delete a residence that match id
    # @param id The unique identifier of the Tax Residence
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_signature Legacy attribute, do not use.
    # @return [InlineResponse20033]
    def delete_taxresidence(id, opts = {})
      data, _status_code, _headers = delete_taxresidence_with_http_info(id, opts)
      data
    end

    # Delete a residence
    # Delete a residence that match id
    # @param id The unique identifier of the Tax Residence
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_signature Legacy attribute, do not use.
    # @return [Array<(InlineResponse20033, Fixnum, Hash)>] InlineResponse20033 data, response status code and response headers
    def delete_taxresidence_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserTaxResidencesApi.delete_taxresidence ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserTaxResidencesApi.delete_taxresidence"
      end
      # resource path
      local_var_path = '/v1/taxResidences/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'accessSignature'] = opts[:'access_signature'] if !opts[:'access_signature'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20033')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserTaxResidencesApi#delete_taxresidence\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Tax Residence
    # Retrieve a Tax Residence based on its `id`.
    # @param id The unique identifier of the TaxResidence.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_signature Legacy attribute, do not use.
    # @return [InlineResponse20031]
    def get_taxresidence(id, opts = {})
      data, _status_code, _headers = get_taxresidence_with_http_info(id, opts)
      data
    end

    # Get Tax Residence
    # Retrieve a Tax Residence based on its &#x60;id&#x60;.
    # @param id The unique identifier of the TaxResidence.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_signature Legacy attribute, do not use.
    # @return [Array<(InlineResponse20031, Fixnum, Hash)>] InlineResponse20031 data, response status code and response headers
    def get_taxresidence_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserTaxResidencesApi.get_taxresidence ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserTaxResidencesApi.get_taxresidence"
      end
      # resource path
      local_var_path = '/v1/taxResidences/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'accessSignature'] = opts[:'access_signature'] if !opts[:'access_signature'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20031')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserTaxResidencesApi#get_taxresidence\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Search Tax Residences
    # Retrieve Tax Residences that match your search conditions.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_signature Legacy attribute, do not use. 
    # @option opts [Integer] :id The unique identifier of the Tax Residence.
    # @option opts [Integer] :user_id The unique identifier of the User.
    # @return [InlineResponse20029]
    def get_taxresidences(opts = {})
      data, _status_code, _headers = get_taxresidences_with_http_info(opts)
      data
    end

    # Search Tax Residences
    # Retrieve Tax Residences that match your search conditions.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_signature Legacy attribute, do not use. 
    # @option opts [Integer] :id The unique identifier of the Tax Residence.
    # @option opts [Integer] :user_id The unique identifier of the User.
    # @return [Array<(InlineResponse20029, Fixnum, Hash)>] InlineResponse20029 data, response status code and response headers
    def get_taxresidences_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserTaxResidencesApi.get_taxresidences ...'
      end
      # resource path
      local_var_path = '/v1/taxResidences'

      # query parameters
      query_params = {}
      query_params[:'accessSignature'] = opts[:'access_signature'] if !opts[:'access_signature'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'userId'] = opts[:'user_id'] if !opts[:'user_id'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20029')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserTaxResidencesApi#get_taxresidences\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create Tax Residence
    # Create a new Tax Residence.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_signature Legacy attribute, do not use. 
    # @return [InlineResponse20030]
    def post_taxresidence(body, opts = {})
      data, _status_code, _headers = post_taxresidence_with_http_info(body, opts)
      data
    end

    # Create Tax Residence
    # Create a new Tax Residence.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_signature Legacy attribute, do not use. 
    # @return [Array<(InlineResponse20030, Fixnum, Hash)>] InlineResponse20030 data, response status code and response headers
    def post_taxresidence_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserTaxResidencesApi.post_taxresidence ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling UserTaxResidencesApi.post_taxresidence"
      end
      # resource path
      local_var_path = '/v1/taxResidences'

      # query parameters
      query_params = {}
      query_params[:'accessSignature'] = opts[:'access_signature'] if !opts[:'access_signature'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20030')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserTaxResidencesApi#post_taxresidence\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Tax Residence
    # Modify an existing Tax Residence.
    # @param id The unique identifier of the TaxResidence
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_signature Legacy attribute, do not use.
    # @option opts [Integer] :user_id User&#39;s id residence
    # @option opts [String] :country country of the resident
    # @option opts [String] :tax_payer_id Tax payer&#39;s id
    # @option opts [BOOLEAN] :liability_waiver Tax declaration
    # @return [InlineResponse20032]
    def put_taxresidence(id, opts = {})
      data, _status_code, _headers = put_taxresidence_with_http_info(id, opts)
      data
    end

    # Update Tax Residence
    # Modify an existing Tax Residence.
    # @param id The unique identifier of the TaxResidence
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_signature Legacy attribute, do not use.
    # @option opts [Integer] :user_id User&#39;s id residence
    # @option opts [String] :country country of the resident
    # @option opts [String] :tax_payer_id Tax payer&#39;s id
    # @option opts [BOOLEAN] :liability_waiver Tax declaration
    # @return [Array<(InlineResponse20032, Fixnum, Hash)>] InlineResponse20032 data, response status code and response headers
    def put_taxresidence_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserTaxResidencesApi.put_taxresidence ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserTaxResidencesApi.put_taxresidence"
      end
      # resource path
      local_var_path = '/v1/taxResidences/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'accessSignature'] = opts[:'access_signature'] if !opts[:'access_signature'].nil?
      query_params[:'userId'] = opts[:'user_id'] if !opts[:'user_id'].nil?
      query_params[:'country'] = opts[:'country'] if !opts[:'country'].nil?
      query_params[:'taxPayerId'] = opts[:'tax_payer_id'] if !opts[:'tax_payer_id'].nil?
      query_params[:'liabilityWaiver'] = opts[:'liability_waiver'] if !opts[:'liability_waiver'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20032')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserTaxResidencesApi#put_taxresidence\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
