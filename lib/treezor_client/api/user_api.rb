=begin
#Treezor

#Treezor API.  more info [here](https://www.treezor.com). 

OpenAPI spec version: 0.1.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.19

=end

require 'uri'

module TreezorClient
  class UserApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # delete a user
    # Change user's status to **CANCELED**.
    # @param id User&#39;s ID
    # @param origin Origin of the request.  Possible values: * OPERATOR * USER 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_signature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
    # @option opts [String] :access_tag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
    # @option opts [Integer] :access_user_id Access user&#39;s id is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @option opts [String] :access_user_ip Access user&#39;s ip is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @return [InlineResponse20026]
    def delete_user(id, origin, opts = {})
      data, _status_code, _headers = delete_user_with_http_info(id, origin, opts)
      data
    end

    # delete a user
    # Change user&#39;s status to **CANCELED**.
    # @param id User&#39;s ID
    # @param origin Origin of the request.  Possible values: * OPERATOR * USER 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_signature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
    # @option opts [String] :access_tag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
    # @option opts [Integer] :access_user_id Access user&#39;s id is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @option opts [String] :access_user_ip Access user&#39;s ip is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @return [Array<(InlineResponse20026, Fixnum, Hash)>] InlineResponse20026 data, response status code and response headers
    def delete_user_with_http_info(id, origin, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.delete_user ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserApi.delete_user"
      end
      # verify the required parameter 'origin' is set
      if @api_client.config.client_side_validation && origin.nil?
        fail ArgumentError, "Missing the required parameter 'origin' when calling UserApi.delete_user"
      end
      # resource path
      local_var_path = '/users/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'origin'] = origin
      query_params[:'accessSignature'] = opts[:'access_signature'] if !opts[:'access_signature'].nil?
      query_params[:'accessTag'] = opts[:'access_tag'] if !opts[:'access_tag'].nil?
      query_params[:'accessUserId'] = opts[:'access_user_id'] if !opts[:'access_user_id'].nil?
      query_params[:'accessUserIp'] = opts[:'access_user_ip'] if !opts[:'access_user_ip'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20026')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#delete_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # get an user
    # Get user's information for given user's id.
    # @param id User&#39;s ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_signature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
    # @option opts [String] :access_tag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
    # @option opts [Integer] :access_user_id Access user&#39;s id is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @option opts [String] :access_user_ip Access user&#39;s ip is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @return [InlineResponse20026]
    def get_user(id, opts = {})
      data, _status_code, _headers = get_user_with_http_info(id, opts)
      data
    end

    # get an user
    # Get user&#39;s information for given user&#39;s id.
    # @param id User&#39;s ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_signature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
    # @option opts [String] :access_tag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
    # @option opts [Integer] :access_user_id Access user&#39;s id is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @option opts [String] :access_user_ip Access user&#39;s ip is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @return [Array<(InlineResponse20026, Fixnum, Hash)>] InlineResponse20026 data, response status code and response headers
    def get_user_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.get_user ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserApi.get_user"
      end
      # resource path
      local_var_path = '/users/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'accessSignature'] = opts[:'access_signature'] if !opts[:'access_signature'].nil?
      query_params[:'accessTag'] = opts[:'access_tag'] if !opts[:'access_tag'].nil?
      query_params[:'accessUserId'] = opts[:'access_user_id'] if !opts[:'access_user_id'].nil?
      query_params[:'accessUserIp'] = opts[:'access_user_ip'] if !opts[:'access_user_ip'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20026')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#get_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # search users
    # Get users from the system.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_signature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
    # @option opts [String] :access_tag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
    # @option opts [Integer] :access_user_id Access user&#39;s id is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @option opts [String] :access_user_ip Access user&#39;s ip is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @option opts [Integer] :user_id User&#39;s unique ID
    # @option opts [Integer] :user_type_id User&#39;s type.
    # @option opts [String] :user_status User&#39;s status.
    # @option opts [String] :user_tag Custom data that you can add to this item.
    # @option opts [Integer] :specified_us_person Est considéré comme ayant la nationalité ou la citoyenneté américaine : Tout citoyen des États-Unis : une personne est présumée citoyen des États-Unis dès lors qu’elle possède un passeport américain ou qu’elle est née sur le territoire des Etats-Unis, même lorsqu’un tel lieu de naissance figure sur un passeport d’un autre pays, ou que la personne possède également une autre nationalité ou a sa résidence dans un autre pays. Une condition néanmoins : la personne ne doit pas avoir renoncé à la citoyenneté américaine ; • Tout résident légal des États-Unis, quelle que soit sa nationalité : (i) quiconque est considéré comme résident fiscal aux États-Unis aux termes de la loi fédérale américaine, (ii) quiconque demande à être traité comme résident fiscal aux États-Unis, ou (iii) quiconque est considéré comme résident fiscal aux termes de la loi de cet État américain. • Toute personne titulaire d’une carte de séjour permanent (green card) aux États-Unis ou résidant de façon permanente aux États-Unis ou y ayant passé une période suffisamment longue au cours des trois dernières années. 
    # @option opts [Integer] :controlling_person_type Type of relationship
    # @option opts [Integer] :employee_type Type of user&#39;s role
    # @option opts [String] :email User&#39;s email address (must be valid).
    # @option opts [String] :name User&#39;s Name.
    # @option opts [String] :legal_name Business name
    # @option opts [String] :parent_user_id User id of user&#39;s parent
    # @option opts [Integer] :page_number Pagination page number. More info [here](https://agent.treezor.com/lists). 
    # @option opts [Integer] :page_count The number of items per page. More info [here](https://agent.treezor.com/lists). 
    # @option opts [String] :sort_by The transaction element you want to sort the list with. Default value: createdDate. More info [here](https://agent.treezor.com/lists). 
    # @option opts [String] :sort_order The order you want to sort the list. * **DESC** for a descending sort * **ASC** for a ascending sort.  Default value : DESC. More info [here](https://agent.treezor.com/lists). 
    # @option opts [DateTime] :created_date_from The creation date from which you want to filter the request result. Format YYYY-MM-DD HH:MM:SS. More info [here](https://agent.treezor.com/lists) 
    # @option opts [DateTime] :created_date_to The creation date up to which you want to filter the request result. Format YYYY-MM-DD HH:MM:SS. More info [here](https://agent.treezor.com/lists) 
    # @option opts [DateTime] :updated_date_from The modification date from which you want to filter the request result. Format YYYY-MM-DD HH:MM:SS. More info [here](https://agent.treezor.com/lists) 
    # @option opts [DateTime] :updated_date_to The modification date up to which you want to filter the request result. Format YYYY-MM-DD HH:MM:SS. More info [here](https://agent.treezor.com/lists) 
    # @return [InlineResponse20026]
    def get_users(opts = {})
      data, _status_code, _headers = get_users_with_http_info(opts)
      data
    end

    # search users
    # Get users from the system.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_signature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
    # @option opts [String] :access_tag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
    # @option opts [Integer] :access_user_id Access user&#39;s id is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @option opts [String] :access_user_ip Access user&#39;s ip is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @option opts [Integer] :user_id User&#39;s unique ID
    # @option opts [Integer] :user_type_id User&#39;s type.
    # @option opts [String] :user_status User&#39;s status.
    # @option opts [String] :user_tag Custom data that you can add to this item.
    # @option opts [Integer] :specified_us_person Est considéré comme ayant la nationalité ou la citoyenneté américaine : Tout citoyen des États-Unis : une personne est présumée citoyen des États-Unis dès lors qu’elle possède un passeport américain ou qu’elle est née sur le territoire des Etats-Unis, même lorsqu’un tel lieu de naissance figure sur un passeport d’un autre pays, ou que la personne possède également une autre nationalité ou a sa résidence dans un autre pays. Une condition néanmoins : la personne ne doit pas avoir renoncé à la citoyenneté américaine ; • Tout résident légal des États-Unis, quelle que soit sa nationalité : (i) quiconque est considéré comme résident fiscal aux États-Unis aux termes de la loi fédérale américaine, (ii) quiconque demande à être traité comme résident fiscal aux États-Unis, ou (iii) quiconque est considéré comme résident fiscal aux termes de la loi de cet État américain. • Toute personne titulaire d’une carte de séjour permanent (green card) aux États-Unis ou résidant de façon permanente aux États-Unis ou y ayant passé une période suffisamment longue au cours des trois dernières années. 
    # @option opts [Integer] :controlling_person_type Type of relationship
    # @option opts [Integer] :employee_type Type of user&#39;s role
    # @option opts [String] :email User&#39;s email address (must be valid).
    # @option opts [String] :name User&#39;s Name.
    # @option opts [String] :legal_name Business name
    # @option opts [String] :parent_user_id User id of user&#39;s parent
    # @option opts [Integer] :page_number Pagination page number. More info [here](https://agent.treezor.com/lists). 
    # @option opts [Integer] :page_count The number of items per page. More info [here](https://agent.treezor.com/lists). 
    # @option opts [String] :sort_by The transaction element you want to sort the list with. Default value: createdDate. More info [here](https://agent.treezor.com/lists). 
    # @option opts [String] :sort_order The order you want to sort the list. * **DESC** for a descending sort * **ASC** for a ascending sort.  Default value : DESC. More info [here](https://agent.treezor.com/lists). 
    # @option opts [DateTime] :created_date_from The creation date from which you want to filter the request result. Format YYYY-MM-DD HH:MM:SS. More info [here](https://agent.treezor.com/lists) 
    # @option opts [DateTime] :created_date_to The creation date up to which you want to filter the request result. Format YYYY-MM-DD HH:MM:SS. More info [here](https://agent.treezor.com/lists) 
    # @option opts [DateTime] :updated_date_from The modification date from which you want to filter the request result. Format YYYY-MM-DD HH:MM:SS. More info [here](https://agent.treezor.com/lists) 
    # @option opts [DateTime] :updated_date_to The modification date up to which you want to filter the request result. Format YYYY-MM-DD HH:MM:SS. More info [here](https://agent.treezor.com/lists) 
    # @return [Array<(InlineResponse20026, Fixnum, Hash)>] InlineResponse20026 data, response status code and response headers
    def get_users_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.get_users ...'
      end
      # resource path
      local_var_path = '/users'

      # query parameters
      query_params = {}
      query_params[:'accessSignature'] = opts[:'access_signature'] if !opts[:'access_signature'].nil?
      query_params[:'accessTag'] = opts[:'access_tag'] if !opts[:'access_tag'].nil?
      query_params[:'accessUserId'] = opts[:'access_user_id'] if !opts[:'access_user_id'].nil?
      query_params[:'accessUserIp'] = opts[:'access_user_ip'] if !opts[:'access_user_ip'].nil?
      query_params[:'userId'] = opts[:'user_id'] if !opts[:'user_id'].nil?
      query_params[:'userTypeId'] = opts[:'user_type_id'] if !opts[:'user_type_id'].nil?
      query_params[:'userStatus'] = opts[:'user_status'] if !opts[:'user_status'].nil?
      query_params[:'userTag'] = opts[:'user_tag'] if !opts[:'user_tag'].nil?
      query_params[:'specifiedUSPerson'] = opts[:'specified_us_person'] if !opts[:'specified_us_person'].nil?
      query_params[:'controllingPersonType'] = opts[:'controlling_person_type'] if !opts[:'controlling_person_type'].nil?
      query_params[:'employeeType'] = opts[:'employee_type'] if !opts[:'employee_type'].nil?
      query_params[:'email'] = opts[:'email'] if !opts[:'email'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'legalName'] = opts[:'legal_name'] if !opts[:'legal_name'].nil?
      query_params[:'parentUserId'] = opts[:'parent_user_id'] if !opts[:'parent_user_id'].nil?
      query_params[:'pageNumber'] = opts[:'page_number'] if !opts[:'page_number'].nil?
      query_params[:'pageCount'] = opts[:'page_count'] if !opts[:'page_count'].nil?
      query_params[:'sortBy'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'sortOrder'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?
      query_params[:'createdDateFrom'] = opts[:'created_date_from'] if !opts[:'created_date_from'].nil?
      query_params[:'createdDateTo'] = opts[:'created_date_to'] if !opts[:'created_date_to'].nil?
      query_params[:'updatedDateFrom'] = opts[:'updated_date_from'] if !opts[:'updated_date_from'].nil?
      query_params[:'updatedDateTo'] = opts[:'updated_date_to'] if !opts[:'updated_date_to'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20026')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#get_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # update a user
    # Update user's information.
    # @param id User&#39;s ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_signature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
    # @option opts [String] :access_tag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
    # @option opts [Integer] :access_user_id Access user&#39;s id is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @option opts [String] :access_user_ip Access user&#39;s ip is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @option opts [String] :user_tag Custom data.
    # @option opts [Integer] :specified_us_person Est considéré comme ayant la nationalité ou la citoyenneté américaine : Tout citoyen des États-Unis : une personne est présumée citoyen des États-Unis dès lors qu’elle possède un passeport américain ou qu’elle est née sur le territoire des Etats-Unis, même lorsqu’un tel lieu de naissance figure sur un passeport d’un autre pays, ou que la personne possède également une autre nationalité ou a sa résidence dans un autre pays. Une condition néanmoins : la personne ne doit pas avoir renoncé à la citoyenneté américaine ; • Tout résident légal des États-Unis, quelle que soit sa nationalité : (i) quiconque est considéré comme résident fiscal aux États-Unis aux termes de la loi fédérale américaine, (ii) quiconque demande à être traité comme résident fiscal aux États-Unis, ou (iii) quiconque est considéré comme résident fiscal aux termes de la loi de cet État américain. • Toute personne titulaire d’une carte de séjour permanent (green card) aux États-Unis ou résidant de façon permanente aux États-Unis ou y ayant passé une période suffisamment longue au cours des trois dernières années. | Value | Type | | --- | --- | | 0 | No | | 1 | Yes | 
    # @option opts [Integer] :controlling_person_type Type of relationship | Value | Type | | --- | --- | | 1 | Shareholder | | 2 | Other_relationship | | 3 | Director | | 4 | None (default) | 
    # @option opts [Integer] :employee_type Type of relationship. Possible values:     | Value | Type |     | --- | --- |     | 1 | Leader |     | 2 | Employee |     | 3 | None (default)| 
    # @option opts [String] :title User&#39;s title. Possible values: * M * MME * MLLE 
    # @option opts [String] :firstname User&#39;s first name
    # @option opts [String] :lastname User&#39;s last name
    # @option opts [String] :middle_names User&#39;s middle names
    # @option opts [String] :birthday User&#39;s birth date. Format YYYY-MM-DD
    # @option opts [String] :email User&#39;s email address (must be valid).
    # @option opts [String] :address1 User&#39;s postal address (main)
    # @option opts [String] :address2 User&#39;s postal address (complement)
    # @option opts [String] :postcode User&#39;s postcode
    # @option opts [String] :city User&#39;s city
    # @option opts [String] :state User&#39;s state
    # @option opts [String] :country User&#39;s country
    # @option opts [String] :phone User&#39;s phone number
    # @option opts [String] :mobile User&#39;s mobile phone number
    # @option opts [String] :nationality User&#39;s nationality
    # @option opts [String] :nationality_other User&#39;s other nationality
    # @option opts [String] :place_of_birth User&#39;s place of birth
    # @option opts [String] :birth_country User&#39;s country of birth
    # @option opts [String] :occupation User&#39;s occupation
    # @option opts [String] :occupation_category 
    # @option opts [String] :income_range Customer income range
    # @option opts [String] :monthly_income_range 
    # @option opts [String] :legal_name Business name
    # @option opts [String] :legal_registration_number Business registration number
    # @option opts [String] :legal_tva_number Business VAT number
    # @option opts [Date] :legal_registration_date Business registration date
    # @option opts [String] :legal_form | Code | Category | Details (in french) | | ---- | ----- | ---- | | 1000 | Individual company | Entrepreneur Individuel a Responsabilité Limitée (EIRL) | | 1100 | Individual company | Artisan-Commerçant | | 1200 | Individual company | Commerçant | | 1300 | Individual company | Artisan | | 1400 | Liberal profession | Officier public ou ministériel | | 1500 | Liberal profession | Profession libérale | | 1600 | Farm operator  | Exploitant agricole | | 1700 | Liberal profession | Agent commercial | | 1800 | Partner Director | Associé-gérant | | 1900 | Individual company | Personne physique | | 2110 | Indivision and others | Indivision entre personnes physiques | | 2120 | Indivision and others | Indivision avec personne morale | | 2210 | Indivision and others | Société créée de fait entre personnes physiques | | 2220 | Indivision and others | Société créée de fait avec personne morale | | 2310 | Indivision and others | Société en participation entre personnes physiques | | 2320 | Indivision and others | Société en participation avec personne morale | | 2385 | Indivision and others | Société en participation de professions libérales | | 2400 | Indivision and others | Fiducie | | 2700 | Diverse | Paroisse hors zone concordataire | | 2900 | Economic Interest Grouping | Autre groupement de droit privé non doté de la personnalité morale | | 3110 | Foreign company | Représentation ou agence commerciale d&#39;état ou organisme public étranger  immatriculé au RCS | | 3120 | Foreign company | Société étrangère immatriculée au RCS | | 3205 | Foreign company | Organisation internationale | | 3210 | Foreign company | Etat collectivité ou établissement public étranger | | 3220 | Foreign company | Société étrangère non immatriculée au RCS | | 3290 | Foreign company | (Autre) personne morale de droit étranger | | 4110 | Administrations, Instituions | Etablissement public national à caractère industriel ou commercial doté d&#39;un comptable public | | 4120 | Administrations, Instituions | Etablissement public national à caractère industriel ou commercial non doté d&#39;un comptable public | | 4130 | Administrations, Instituions | Exploitant public | | 4140 | Administrations, Instituions | Etablissement public local à caractère industriel ou commercial | | 4150 | Administrations, Instituions | Régie d&#39;une collectivité locale à caractère industriel ou commercial | | 4160 | Administrations, Instituions | Institution Banque de France | | 5191 | De facto undivided ownership company | Société de caution mutuelle | | 5192 | Diverse | Société coopérative de banque populaire | | 5193 | De facto undivided ownership company | Caisse de crédit maritime mutuel | | 5194 | De facto undivided ownership company | Caisse (fédérale) de crédit mutuel | | 5195 | Association fondation | Association coopérative inscrite (droit local Alsace Moselle) | | 5196 | De facto undivided ownership company | Caisse d&#39;épargne et de prévoyance à forme coopérative | | 5202 | General partnership | Société en nom collectif | | 5203 | General partnership | Société en nom collectif coopérative | | 5306 | Limited company | Société en commandite simple | | 5307 | Limited company | Société en commandite simple coopérative | | 5308 | Limited company | Société en commandite par actions | | 5309 | Limited company | Société en commandite par actions coopérative | | 5385 | Limited company | Société d&#39;exercice libéral en commandite par action | | 5410 | Limited Liability Company  | SARL nationale | | 5415 | Limited Liability Company  | SARL d&#39;économie mixte | | 5422 | Limited Liability Company  | SARL immobilière pour le commerce et l&#39;industrie (SICOMI) | | 5426 | Limited Liability Company  | Société immobilière de gestion | | 5430 | Limited Liability Company  | Safer en SARL | | 5431 | Limited Liability Company  | SARL mixte d&#39;intérêt agricole (SIMA) | | 5432 | Limited Liability Company  | SARL d&#39;intérêt collectif agricole (SICA) | | 5442 | Limited Liability Company  | SARL d&#39;attribution | | 5443 | Limited Liability Company  | SARL coopérative de construction | | 5451 | Limited Liability Company  | SARL coopérative de consommation | | 5453 | Limited Liability Company  | SARL coopérative artisanale | | 5454 | Limited Liability Company  | SARL coopérative d&#39;intérêt maritime | | 5455 | Limited Liability Company  | SARL coopérative de transports | | 5458 | Limited Liability Company  | SARL coopérative ouvrière de production et de crédit (SCOP) | | 5459 | Limited Liability Company  | SARL union de sociétés coopératives | | 5460 | Limited Liability Company  | SARL coopérative | | 5485 | Limited Liability Company  | Société d&#39;exercice libéral à responsabilité limitée | | 5498 | Limited Liability Company  | SARL unipersonnelle | | 5499 | Limited Liability Company  | SARL | | 5505 | Limited company | SA à participation ouvrière à conseil d&#39;administration | | 5510 | Limited company | SA nationale à conseil d&#39;administration | | 5515 | Limited company | SA d&#39;économie mixte à conseil d&#39;administration | | 5520 | Limited company | Société d&#39;investissement à capital variable (SICAV) à conseil d&#39;administration | | 5522 | Limited company | Société anonyme immobilière pour le commerce et l&#39;industrie (SICOMI)  à conseil d&#39;administration | | 5525 | Limited company | Société anonyme immobilière d&#39;investissement à conseil d&#39;administration | | 5530 | Limited company | Safer anonyme à conseil d&#39;administration | | 5531 | Limited company | Société anonyme mixte d&#39;intérêt agricole (SMIA) à conseil d&#39;administration | | 5532 | Limited company | Société anonyme mixte d&#39;intérêt collectif agricole (SICA) à conseil d&#39;administration | | 5542 | Limited company | Société anonyme d&#39;attribution à conseil d&#39;administration | | 5543 | Limited company | Société anonyme coopérative de construction à conseil d&#39;administration | | 5546 | Limited company | SA de HLM à conseil d&#39;administration | | 5547 | Limited company | SA coopérative de production de HLM à conseil d&#39;administration | | 5548 | Limited company | SA de crédit immobilier à conseil d&#39;administration | | 5551 | Limited company | SA coopérative de consommation à conseil d&#39;administration | | 5552 | Limited company | SA coopérative de commerçants détaillants à conseil d&#39;administration | | 5553 | Limited company | SA coopérative artisanale à conseil d&#39;administration | | 5554 | Limited company | SA coopérative (d&#39;intérêt) maritime à conseil d&#39;administration | | 5555 | Limited company | SA coopérative de transports à conseil d&#39;administration | | 5558 | Limited company | SCOP à conseil d&#39;administration | | 5559 | Limited company | SA union de sociétés coopératives à conseil d&#39;administration | | 5560 | Limited company | SA coopérative à conseil d&#39;administration | | 5585 | Limited company | Société d&#39;exercice libéral à forme anonyme à conseil d&#39;administration | | 5599 | Limited company | SA à conseil d&#39;administration | | 5605 | Limited company | SA à participation ouvrière à directoire | | 5610 | Limited company | SA nationale à directoire | | 5615 | Limited company | SA d&#39;économie mixte à directoire | | 5620 | Limited company | SICAV | | 5622 | Limited company | SICOMI | | 5625 | Limited company | Société immobilière d&#39;investissement anonyme à directoire | | 5630 | Limited company | Safer anonyme à directoire | | 5631 | Limited company | Société anonyme mixte d&#39;intérêt agricole (SMIA) | | 5632 | Limited company | SICA | | 5642 | Limited company | Société anonyme d&#39;attribution à directoire | | 5643 | Limited company | Société anonyme coopérative de construction à directoire | | 5646 | Limited company | S.A. HLM à directoire | | 5647 | Limited company | Société coopérative de production de HLM anonyme à directoire | | 5648 | Limited company | SA de crédit immobilier à directoire | | 5651 | Limited company | SA coopérative de consommation à directoire | | 5652 | Limited company | SA coopérative de commerçants détaillants à directoire | | 5653 | Limited company | SA coopérative artisanale à directoire | | 5654 | Limited company | SA coopérative (d&#39;intérêt) maritime à directoire | | 5655 | Limited company | SA coopérative de transport à directoire | | 5658 | Limited company | SCOP | | 5659 | Limited company | SA union de sociétés coopératives à directoire | | 5660 | Limited company | SA coopérative à directoire | | 5685 | Limited company | Société d&#39;exercice libéral à forme anonyme à directoire | | 5699 | Limited company | (Autre) SA à directoire | | 5710 | Limited company | SAS | | 5720 | Limited company | SASU | | 5785 | Limited company | Société d&#39;exercice libéral par action simplifiée | | 5800 | Diverse | Société européenne | | 6100 | De facto undivided ownership company | Caisse d&#39;épargne et de prévoyance | | 6210 | Economic Interest Grouping | GEIE | | 6220 | Economic Interest Grouping | GIE | | 6316 | Diverse | CUMA | | 6317 | Diverse | Société coopérative agricole | | 6318 | Diverse | Union de sociétés coopératives agricoles | | 6411 | De facto undivided ownership company | Société d&#39;assurance mutuelle | | 6521 | Civils companies (without SCI) | SCPI | | 6532 | Civils companies (without SCI) | SICA | | 6533 | Civils companies (without SCI) | GAEC | | 6534 | Civils companies (without SCI) | Groupement foncier agricole | | 6535 | Civils companies (without SCI) | Groupement agricole foncier | | 6536 | Civils companies (without SCI) | Groupement forestier | | 6537 | Civils companies (without SCI) | Groupement pastoral | | 6538 | Civils companies (without SCI) | Groupement foncier rural | | 6539 | Civils companies (without SCI) | Société civile foncière | | 6540 | Civils companies | SCI | | 6541 | Civils companies | SCI de construction vente | | 6542 | Civils companies (without SCI) | Société civile d&#39;attribution | | 6543 | Civils companies (without SCI) | Société civile coopérative de construction | | 6544 | Civils companies | Société civile d&#39;accession progressive à la propriété | | 6551 | Civils companies (without SCI) | Société civile coopérative de consommation | | 6554 | Civils companies (without SCI) | Société civile coopérative (d&#39;intérêt) maritime | | 6558 | Civils companies (without SCI) | Société civile coopérative entre médecins | | 6560 | Civils companies (without SCI) | SCP | | 6561 | Civils companies (without SCI) | SCP d&#39;avocats | | 6562 | Civils companies (without SCI) | SCP d&#39;avocats aux conseil | | 6563 | Civils companies (without SCI) | SCP d&#39;avoués d&#39;appel | | 6564 | Civils companies (without SCI) | SCP d&#39;huissiers | | 6565 | Civils companies (without SCI) | SCP de notaires | | 6566 | Civils companies (without SCI) | SCP de commissaires-priseurs | | 6567 | Civils companies (without SCI) | SCP de greffiers de tribunal de commerce | | 6568 | Civils companies (without SCI) | SCP de conseils juridiques | | 6569 | Civils companies (without SCI) | SCP de commissaires aux comptes | | 6571 | Civils companies (without SCI) | SCP de médecins | | 6572 | Civils companies (without SCI) | SCP de dentistes | | 6573 | Civils companies (without SCI) | SCP d&#39;infirmiers | | 6574 | Civils companies (without SCI) | SCP de masseurs kinésithérapeutes | | 6575 | Civils companies (without SCI) | SCP de directeurs de laboratoire d&#39;analyse médicale | | 6576 | Civils companies (without SCI) | SCP de vétérinaires | | 6577 | Civils companies (without SCI) | SCP de géomètres-experts | | 6578 | Civils companies (without SCI) | SCP d&#39;architectes | | 6585 | Civils companies (without SCI) | SCP | | 6588 | Civils companies (without SCI) | Société civile laitière | | 6589 | Civils companies (without SCI) | Société civile de moyens | | 6595 | Civils companies (without SCI) | Caisse (locale) de crédit mutuel | | 6596 | Civils companies (without SCI) | Caisse de crédit agricole mutuel | | 6597 | Civils companies (without SCI) | Société civile d&#39;exploitation agricole | | 6598 | Farm operator  | Exploitation agricole à responsabilité limitée | | 6599 | Civils companies (without SCI) | Autre société civile | | 6901 | Diverse | Autres personnes de droit privé inscrites au registre du commerce et des sociétés | | 7111 | Administrations, Instituions | Autorité constitutionnelle | | 7112 | Administrations, Instituions | Autorité administrative indépendante | | 7113 | Administrations, Instituions | Ministère | | 7120 | Administrations, Instituions | Service central d&#39;un ministère | | 7150 | Administrations, Instituions | Service du ministère de la Défense | | 7160 | Administrations, Instituions | Service déconcentré à compétence nation . D&#39;un ministère (hors Défense) | | 7171 | Administrations, Instituions | Service déconcentré de l&#39;Etat à compétence (inter) régionale | | 7172 | Administrations, Instituions | Service déconcentré de l&#39;Etat à compétence (inter) départementale | | 7179 | Administrations, Instituions | (Autre) Service déconcentré de l&#39;Etat à compétence territoriale | | 7190 | Administrations, Instituions | Ecole nationale non dotée de la personnalité morale | | 7210 | Administrations, Instituions | Commune | | 7220 | Administrations, Instituions | Département | | 7225 | Administrations, Instituions | Territoire d&#39;Outre-Mer | | 7229 | Administrations, Instituions | (Autre) Collectivité territoriale | | 7230 | Administrations, Instituions | Région | | 7312 | Administrations, Instituions | Commune associée | | 7313 | Administrations, Instituions | Section de commune | | 7314 | Administrations, Instituions | Ensemble urbain | | 7321 | Administrations, Instituions | Association syndicale autorisée | | 7322 | Administrations, Instituions | Association foncière urbaine | | 7323 | Administrations, Instituions | Association foncière de remembrement | | 7331 | Administrations, Instituions | Etablissement public local d&#39;enseignement | | 7340 | Administrations, Instituions | Pôle métropolitain | | 7341 | Administrations, Instituions | Secteur de commune | | 7342 | Administrations, Instituions | District urbain | | 7343 | Administrations, Instituions | Communauté urbaine | | 7344 | Administrations, Instituions | Métropole | | 7345 | Administrations, Instituions | Syndicat intercommunal à vocation multiple (SIVOM) | | 7346 | Administrations, Instituions | Communauté de commune | | 7347 | Administrations, Instituions | Communauté de villes | | 7348 | Administrations, Instituions | Communauté d&#39;agglomération | | 7349 | Administrations, Instituions | Autre établissement public local de coopération non spécialisé ou entente | | 7351 | Administrations, Instituions | Institution interdépartementale ou entente | | 7352 | Administrations, Instituions | Institution interrégionale ou entente | | 7353 | Administrations, Instituions | Syndicat intercommunal à vocation unique (SIVU) | | 7354 | Administrations, Instituions | Syndicat mixte communal | | 7355 | Administrations, Instituions | Autre syndicat mixte | | 7356 | Administrations, Instituions | Commission syndicale pour la gestion des biens indivis des communes | | 7361 | Administrations, Instituions | Centre communal d&#39;action sociale | | 7362 | Administrations, Instituions | Caisse des écoles | | 7363 | Administrations, Instituions | Caisse de crédit municipal | | 7364 | Administrations, Instituions | Etablissement d&#39;hospitalisation | | 7365 | Administrations, Instituions | Syndicat inter hospitalier | | 7366 | Administrations, Instituions | Etablissement public local social et médico-social | | 7371 | Administrations, Instituions | Office public d&#39;habitation à loyer modéré (OPHLM) | | 7372 | Administrations, Instituions | Service départemental d&#39;incendie | | 7373 | Administrations, Instituions | Etablissement public local culturel | | 7378 | Administrations, Instituions | Régie d&#39;une collectivité locale à caractère administratif | | 7379 | Administrations, Instituions | (Autre) Etablissement public administratif local | | 7381 | Administrations, Instituions | Organisme consulaire | | 7382 | Administrations, Instituions | Etablissement public national ayant fonction d&#39;administration centrale | | 7383 | Administrations, Instituions | Etablissement public national à caractère scientifique  culturel et professionnel | | 7384 | Administrations, Instituions | Autre établissement public national d&#39;enseignement | | 7385 | Administrations, Instituions | Autre établissement public national administratif à compétence territoriale limitée | | 7389 | Administrations, Instituions | Etablissement public national à caractère administratif | | 7410 | Administrations, Instituions | Groupement d&#39;intérêt public (GIP) | | 7430 | Administrations, Instituions | Etablissement public des cultes d&#39;Alsace-Lorraine | | 7450 | Administrations, Instituions | Etablissement public, cercle et foyer dans les armées | | 7470 | Administrations, Instituions | Groupement de coopération sanitaire à gestion publique | | 7490 | Administrations, Instituions | Autre personne morale de droit administratif | | 8110 | Administrations, Instituions | Régime général de la sécurité sociale | | 8120 | Administrations, Instituions | Régime spécial de sécurité sociale | | 8130 | Administrations, Instituions | Institution de retraite complémentaire | | 8140 | Administrations, Instituions | Mutualité sociale agricole | | 8150 | Administrations, Instituions | Régime maladie des non-salariés non agricoles | | 8160 | Administrations, Instituions | Régime vieillesse ne dépendant pas du régime général de la sécurité sociale | | 8170 | Administrations, Instituions | Régime d&#39;assurance chômage | | 8190 | Administrations, Instituions | Autre régime de prévoyance sociale | | 8210 | De facto undivided ownership company | Mutuelle | | 8250 | De facto undivided ownership company | Assurance mutuelle agricole | | 8290 | De facto undivided ownership company | Autre organisme mutualiste | | 8310 | Association fondation | Comité central d&#39;entreprise | | 8311 | Association fondation | Comité d&#39;établissement | | 8410 | Association fondation | Syndicat de salariés | | 8420 | Association fondation | Syndicat patronal | | 8450 | Association fondation | Ordre professionnel ou assimilé | | 8470 | Association fondation | Centre technique industriel ou comité professionnel du développement économique | | 8490 | Association fondation | Autre organisme professionnel | | 8510 | Administrations, Instituions | Institution de prévoyance | | 8520 | Administrations, Instituions | Institution de retraite supplémentaire | | 9110 | Condominium syndicate | Syndicat de copropriété | | 9150 | Association fondation | Association syndicale libre | | 9210 | Association fondation | Association non déclarée | | 9220 | Association fondation | Association déclarée | | 9221 | Association fondation | Association déclarée \&quot;entreprises d&#39;insertion par l&#39;économique\&quot; | | 9222 | Association fondation | Association intermédiaire | | 9223 | Association fondation | Groupement d&#39;employeurs | | 9224 | Association fondation | Association d&#39;avocats à responsabilité professionnelle individuelle | | 9230 | Association fondation | Association déclarée  reconnue d&#39;utilité publique | | 9240 | Association fondation | Congrégation | | 9260 | Association fondation | Association de droit local | | 9300 | Association fondation | Fondation | | 9900 | Diverse | Autre personne morale de droit privé | | 9970 | Diverse | Groupement de coopération sanitaire à gestion privée | 
    # @option opts [Integer] :legal_share_capital Business share capital
    # @option opts [String] :legal_sector Business sector. NAF code in France
    # @option opts [String] :legal_annual_turn_over Business annual turnover (in k€)
    # @option opts [String] :legal_net_income_range Business net income range (in k€)
    # @option opts [String] :legal_number_of_employee_range Business number of employees range
    # @option opts [Integer] :effective_beneficiary Business effective beneficiary
    # @option opts [String] :language User&#39;s prefered language (ISO 639-1)
    # @option opts [String] :tax_number User&#39;s tax identification number. If the taxResidence is not set to FR, the field is mandatory.
    # @option opts [String] :tax_residence User&#39;s tax residence country code (2 char code following ISO 3166 norm).
    # @option opts [String] :position User&#39;s position  (deprecated, you must use the parameter occupation).
    # @option opts [String] :personal_assets User&#39;s personal assets range expressed in k€.
    # @option opts [String] :personal_assets_range 
    # @return [InlineResponse20026]
    def put_user(id, opts = {})
      data, _status_code, _headers = put_user_with_http_info(id, opts)
      data
    end

    # update a user
    # Update user&#39;s information.
    # @param id User&#39;s ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_signature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
    # @option opts [String] :access_tag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
    # @option opts [Integer] :access_user_id Access user&#39;s id is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @option opts [String] :access_user_ip Access user&#39;s ip is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @option opts [String] :user_tag Custom data.
    # @option opts [Integer] :specified_us_person Est considéré comme ayant la nationalité ou la citoyenneté américaine : Tout citoyen des États-Unis : une personne est présumée citoyen des États-Unis dès lors qu’elle possède un passeport américain ou qu’elle est née sur le territoire des Etats-Unis, même lorsqu’un tel lieu de naissance figure sur un passeport d’un autre pays, ou que la personne possède également une autre nationalité ou a sa résidence dans un autre pays. Une condition néanmoins : la personne ne doit pas avoir renoncé à la citoyenneté américaine ; • Tout résident légal des États-Unis, quelle que soit sa nationalité : (i) quiconque est considéré comme résident fiscal aux États-Unis aux termes de la loi fédérale américaine, (ii) quiconque demande à être traité comme résident fiscal aux États-Unis, ou (iii) quiconque est considéré comme résident fiscal aux termes de la loi de cet État américain. • Toute personne titulaire d’une carte de séjour permanent (green card) aux États-Unis ou résidant de façon permanente aux États-Unis ou y ayant passé une période suffisamment longue au cours des trois dernières années. | Value | Type | | --- | --- | | 0 | No | | 1 | Yes | 
    # @option opts [Integer] :controlling_person_type Type of relationship | Value | Type | | --- | --- | | 1 | Shareholder | | 2 | Other_relationship | | 3 | Director | | 4 | None (default) | 
    # @option opts [Integer] :employee_type Type of relationship. Possible values:     | Value | Type |     | --- | --- |     | 1 | Leader |     | 2 | Employee |     | 3 | None (default)| 
    # @option opts [String] :title User&#39;s title. Possible values: * M * MME * MLLE 
    # @option opts [String] :firstname User&#39;s first name
    # @option opts [String] :lastname User&#39;s last name
    # @option opts [String] :middle_names User&#39;s middle names
    # @option opts [String] :birthday User&#39;s birth date. Format YYYY-MM-DD
    # @option opts [String] :email User&#39;s email address (must be valid).
    # @option opts [String] :address1 User&#39;s postal address (main)
    # @option opts [String] :address2 User&#39;s postal address (complement)
    # @option opts [String] :postcode User&#39;s postcode
    # @option opts [String] :city User&#39;s city
    # @option opts [String] :state User&#39;s state
    # @option opts [String] :country User&#39;s country
    # @option opts [String] :phone User&#39;s phone number
    # @option opts [String] :mobile User&#39;s mobile phone number
    # @option opts [String] :nationality User&#39;s nationality
    # @option opts [String] :nationality_other User&#39;s other nationality
    # @option opts [String] :place_of_birth User&#39;s place of birth
    # @option opts [String] :birth_country User&#39;s country of birth
    # @option opts [String] :occupation User&#39;s occupation
    # @option opts [String] :occupation_category 
    # @option opts [String] :income_range Customer income range
    # @option opts [String] :monthly_income_range 
    # @option opts [String] :legal_name Business name
    # @option opts [String] :legal_registration_number Business registration number
    # @option opts [String] :legal_tva_number Business VAT number
    # @option opts [Date] :legal_registration_date Business registration date
    # @option opts [String] :legal_form | Code | Category | Details (in french) | | ---- | ----- | ---- | | 1000 | Individual company | Entrepreneur Individuel a Responsabilité Limitée (EIRL) | | 1100 | Individual company | Artisan-Commerçant | | 1200 | Individual company | Commerçant | | 1300 | Individual company | Artisan | | 1400 | Liberal profession | Officier public ou ministériel | | 1500 | Liberal profession | Profession libérale | | 1600 | Farm operator  | Exploitant agricole | | 1700 | Liberal profession | Agent commercial | | 1800 | Partner Director | Associé-gérant | | 1900 | Individual company | Personne physique | | 2110 | Indivision and others | Indivision entre personnes physiques | | 2120 | Indivision and others | Indivision avec personne morale | | 2210 | Indivision and others | Société créée de fait entre personnes physiques | | 2220 | Indivision and others | Société créée de fait avec personne morale | | 2310 | Indivision and others | Société en participation entre personnes physiques | | 2320 | Indivision and others | Société en participation avec personne morale | | 2385 | Indivision and others | Société en participation de professions libérales | | 2400 | Indivision and others | Fiducie | | 2700 | Diverse | Paroisse hors zone concordataire | | 2900 | Economic Interest Grouping | Autre groupement de droit privé non doté de la personnalité morale | | 3110 | Foreign company | Représentation ou agence commerciale d&#39;état ou organisme public étranger  immatriculé au RCS | | 3120 | Foreign company | Société étrangère immatriculée au RCS | | 3205 | Foreign company | Organisation internationale | | 3210 | Foreign company | Etat collectivité ou établissement public étranger | | 3220 | Foreign company | Société étrangère non immatriculée au RCS | | 3290 | Foreign company | (Autre) personne morale de droit étranger | | 4110 | Administrations, Instituions | Etablissement public national à caractère industriel ou commercial doté d&#39;un comptable public | | 4120 | Administrations, Instituions | Etablissement public national à caractère industriel ou commercial non doté d&#39;un comptable public | | 4130 | Administrations, Instituions | Exploitant public | | 4140 | Administrations, Instituions | Etablissement public local à caractère industriel ou commercial | | 4150 | Administrations, Instituions | Régie d&#39;une collectivité locale à caractère industriel ou commercial | | 4160 | Administrations, Instituions | Institution Banque de France | | 5191 | De facto undivided ownership company | Société de caution mutuelle | | 5192 | Diverse | Société coopérative de banque populaire | | 5193 | De facto undivided ownership company | Caisse de crédit maritime mutuel | | 5194 | De facto undivided ownership company | Caisse (fédérale) de crédit mutuel | | 5195 | Association fondation | Association coopérative inscrite (droit local Alsace Moselle) | | 5196 | De facto undivided ownership company | Caisse d&#39;épargne et de prévoyance à forme coopérative | | 5202 | General partnership | Société en nom collectif | | 5203 | General partnership | Société en nom collectif coopérative | | 5306 | Limited company | Société en commandite simple | | 5307 | Limited company | Société en commandite simple coopérative | | 5308 | Limited company | Société en commandite par actions | | 5309 | Limited company | Société en commandite par actions coopérative | | 5385 | Limited company | Société d&#39;exercice libéral en commandite par action | | 5410 | Limited Liability Company  | SARL nationale | | 5415 | Limited Liability Company  | SARL d&#39;économie mixte | | 5422 | Limited Liability Company  | SARL immobilière pour le commerce et l&#39;industrie (SICOMI) | | 5426 | Limited Liability Company  | Société immobilière de gestion | | 5430 | Limited Liability Company  | Safer en SARL | | 5431 | Limited Liability Company  | SARL mixte d&#39;intérêt agricole (SIMA) | | 5432 | Limited Liability Company  | SARL d&#39;intérêt collectif agricole (SICA) | | 5442 | Limited Liability Company  | SARL d&#39;attribution | | 5443 | Limited Liability Company  | SARL coopérative de construction | | 5451 | Limited Liability Company  | SARL coopérative de consommation | | 5453 | Limited Liability Company  | SARL coopérative artisanale | | 5454 | Limited Liability Company  | SARL coopérative d&#39;intérêt maritime | | 5455 | Limited Liability Company  | SARL coopérative de transports | | 5458 | Limited Liability Company  | SARL coopérative ouvrière de production et de crédit (SCOP) | | 5459 | Limited Liability Company  | SARL union de sociétés coopératives | | 5460 | Limited Liability Company  | SARL coopérative | | 5485 | Limited Liability Company  | Société d&#39;exercice libéral à responsabilité limitée | | 5498 | Limited Liability Company  | SARL unipersonnelle | | 5499 | Limited Liability Company  | SARL | | 5505 | Limited company | SA à participation ouvrière à conseil d&#39;administration | | 5510 | Limited company | SA nationale à conseil d&#39;administration | | 5515 | Limited company | SA d&#39;économie mixte à conseil d&#39;administration | | 5520 | Limited company | Société d&#39;investissement à capital variable (SICAV) à conseil d&#39;administration | | 5522 | Limited company | Société anonyme immobilière pour le commerce et l&#39;industrie (SICOMI)  à conseil d&#39;administration | | 5525 | Limited company | Société anonyme immobilière d&#39;investissement à conseil d&#39;administration | | 5530 | Limited company | Safer anonyme à conseil d&#39;administration | | 5531 | Limited company | Société anonyme mixte d&#39;intérêt agricole (SMIA) à conseil d&#39;administration | | 5532 | Limited company | Société anonyme mixte d&#39;intérêt collectif agricole (SICA) à conseil d&#39;administration | | 5542 | Limited company | Société anonyme d&#39;attribution à conseil d&#39;administration | | 5543 | Limited company | Société anonyme coopérative de construction à conseil d&#39;administration | | 5546 | Limited company | SA de HLM à conseil d&#39;administration | | 5547 | Limited company | SA coopérative de production de HLM à conseil d&#39;administration | | 5548 | Limited company | SA de crédit immobilier à conseil d&#39;administration | | 5551 | Limited company | SA coopérative de consommation à conseil d&#39;administration | | 5552 | Limited company | SA coopérative de commerçants détaillants à conseil d&#39;administration | | 5553 | Limited company | SA coopérative artisanale à conseil d&#39;administration | | 5554 | Limited company | SA coopérative (d&#39;intérêt) maritime à conseil d&#39;administration | | 5555 | Limited company | SA coopérative de transports à conseil d&#39;administration | | 5558 | Limited company | SCOP à conseil d&#39;administration | | 5559 | Limited company | SA union de sociétés coopératives à conseil d&#39;administration | | 5560 | Limited company | SA coopérative à conseil d&#39;administration | | 5585 | Limited company | Société d&#39;exercice libéral à forme anonyme à conseil d&#39;administration | | 5599 | Limited company | SA à conseil d&#39;administration | | 5605 | Limited company | SA à participation ouvrière à directoire | | 5610 | Limited company | SA nationale à directoire | | 5615 | Limited company | SA d&#39;économie mixte à directoire | | 5620 | Limited company | SICAV | | 5622 | Limited company | SICOMI | | 5625 | Limited company | Société immobilière d&#39;investissement anonyme à directoire | | 5630 | Limited company | Safer anonyme à directoire | | 5631 | Limited company | Société anonyme mixte d&#39;intérêt agricole (SMIA) | | 5632 | Limited company | SICA | | 5642 | Limited company | Société anonyme d&#39;attribution à directoire | | 5643 | Limited company | Société anonyme coopérative de construction à directoire | | 5646 | Limited company | S.A. HLM à directoire | | 5647 | Limited company | Société coopérative de production de HLM anonyme à directoire | | 5648 | Limited company | SA de crédit immobilier à directoire | | 5651 | Limited company | SA coopérative de consommation à directoire | | 5652 | Limited company | SA coopérative de commerçants détaillants à directoire | | 5653 | Limited company | SA coopérative artisanale à directoire | | 5654 | Limited company | SA coopérative (d&#39;intérêt) maritime à directoire | | 5655 | Limited company | SA coopérative de transport à directoire | | 5658 | Limited company | SCOP | | 5659 | Limited company | SA union de sociétés coopératives à directoire | | 5660 | Limited company | SA coopérative à directoire | | 5685 | Limited company | Société d&#39;exercice libéral à forme anonyme à directoire | | 5699 | Limited company | (Autre) SA à directoire | | 5710 | Limited company | SAS | | 5720 | Limited company | SASU | | 5785 | Limited company | Société d&#39;exercice libéral par action simplifiée | | 5800 | Diverse | Société européenne | | 6100 | De facto undivided ownership company | Caisse d&#39;épargne et de prévoyance | | 6210 | Economic Interest Grouping | GEIE | | 6220 | Economic Interest Grouping | GIE | | 6316 | Diverse | CUMA | | 6317 | Diverse | Société coopérative agricole | | 6318 | Diverse | Union de sociétés coopératives agricoles | | 6411 | De facto undivided ownership company | Société d&#39;assurance mutuelle | | 6521 | Civils companies (without SCI) | SCPI | | 6532 | Civils companies (without SCI) | SICA | | 6533 | Civils companies (without SCI) | GAEC | | 6534 | Civils companies (without SCI) | Groupement foncier agricole | | 6535 | Civils companies (without SCI) | Groupement agricole foncier | | 6536 | Civils companies (without SCI) | Groupement forestier | | 6537 | Civils companies (without SCI) | Groupement pastoral | | 6538 | Civils companies (without SCI) | Groupement foncier rural | | 6539 | Civils companies (without SCI) | Société civile foncière | | 6540 | Civils companies | SCI | | 6541 | Civils companies | SCI de construction vente | | 6542 | Civils companies (without SCI) | Société civile d&#39;attribution | | 6543 | Civils companies (without SCI) | Société civile coopérative de construction | | 6544 | Civils companies | Société civile d&#39;accession progressive à la propriété | | 6551 | Civils companies (without SCI) | Société civile coopérative de consommation | | 6554 | Civils companies (without SCI) | Société civile coopérative (d&#39;intérêt) maritime | | 6558 | Civils companies (without SCI) | Société civile coopérative entre médecins | | 6560 | Civils companies (without SCI) | SCP | | 6561 | Civils companies (without SCI) | SCP d&#39;avocats | | 6562 | Civils companies (without SCI) | SCP d&#39;avocats aux conseil | | 6563 | Civils companies (without SCI) | SCP d&#39;avoués d&#39;appel | | 6564 | Civils companies (without SCI) | SCP d&#39;huissiers | | 6565 | Civils companies (without SCI) | SCP de notaires | | 6566 | Civils companies (without SCI) | SCP de commissaires-priseurs | | 6567 | Civils companies (without SCI) | SCP de greffiers de tribunal de commerce | | 6568 | Civils companies (without SCI) | SCP de conseils juridiques | | 6569 | Civils companies (without SCI) | SCP de commissaires aux comptes | | 6571 | Civils companies (without SCI) | SCP de médecins | | 6572 | Civils companies (without SCI) | SCP de dentistes | | 6573 | Civils companies (without SCI) | SCP d&#39;infirmiers | | 6574 | Civils companies (without SCI) | SCP de masseurs kinésithérapeutes | | 6575 | Civils companies (without SCI) | SCP de directeurs de laboratoire d&#39;analyse médicale | | 6576 | Civils companies (without SCI) | SCP de vétérinaires | | 6577 | Civils companies (without SCI) | SCP de géomètres-experts | | 6578 | Civils companies (without SCI) | SCP d&#39;architectes | | 6585 | Civils companies (without SCI) | SCP | | 6588 | Civils companies (without SCI) | Société civile laitière | | 6589 | Civils companies (without SCI) | Société civile de moyens | | 6595 | Civils companies (without SCI) | Caisse (locale) de crédit mutuel | | 6596 | Civils companies (without SCI) | Caisse de crédit agricole mutuel | | 6597 | Civils companies (without SCI) | Société civile d&#39;exploitation agricole | | 6598 | Farm operator  | Exploitation agricole à responsabilité limitée | | 6599 | Civils companies (without SCI) | Autre société civile | | 6901 | Diverse | Autres personnes de droit privé inscrites au registre du commerce et des sociétés | | 7111 | Administrations, Instituions | Autorité constitutionnelle | | 7112 | Administrations, Instituions | Autorité administrative indépendante | | 7113 | Administrations, Instituions | Ministère | | 7120 | Administrations, Instituions | Service central d&#39;un ministère | | 7150 | Administrations, Instituions | Service du ministère de la Défense | | 7160 | Administrations, Instituions | Service déconcentré à compétence nation . D&#39;un ministère (hors Défense) | | 7171 | Administrations, Instituions | Service déconcentré de l&#39;Etat à compétence (inter) régionale | | 7172 | Administrations, Instituions | Service déconcentré de l&#39;Etat à compétence (inter) départementale | | 7179 | Administrations, Instituions | (Autre) Service déconcentré de l&#39;Etat à compétence territoriale | | 7190 | Administrations, Instituions | Ecole nationale non dotée de la personnalité morale | | 7210 | Administrations, Instituions | Commune | | 7220 | Administrations, Instituions | Département | | 7225 | Administrations, Instituions | Territoire d&#39;Outre-Mer | | 7229 | Administrations, Instituions | (Autre) Collectivité territoriale | | 7230 | Administrations, Instituions | Région | | 7312 | Administrations, Instituions | Commune associée | | 7313 | Administrations, Instituions | Section de commune | | 7314 | Administrations, Instituions | Ensemble urbain | | 7321 | Administrations, Instituions | Association syndicale autorisée | | 7322 | Administrations, Instituions | Association foncière urbaine | | 7323 | Administrations, Instituions | Association foncière de remembrement | | 7331 | Administrations, Instituions | Etablissement public local d&#39;enseignement | | 7340 | Administrations, Instituions | Pôle métropolitain | | 7341 | Administrations, Instituions | Secteur de commune | | 7342 | Administrations, Instituions | District urbain | | 7343 | Administrations, Instituions | Communauté urbaine | | 7344 | Administrations, Instituions | Métropole | | 7345 | Administrations, Instituions | Syndicat intercommunal à vocation multiple (SIVOM) | | 7346 | Administrations, Instituions | Communauté de commune | | 7347 | Administrations, Instituions | Communauté de villes | | 7348 | Administrations, Instituions | Communauté d&#39;agglomération | | 7349 | Administrations, Instituions | Autre établissement public local de coopération non spécialisé ou entente | | 7351 | Administrations, Instituions | Institution interdépartementale ou entente | | 7352 | Administrations, Instituions | Institution interrégionale ou entente | | 7353 | Administrations, Instituions | Syndicat intercommunal à vocation unique (SIVU) | | 7354 | Administrations, Instituions | Syndicat mixte communal | | 7355 | Administrations, Instituions | Autre syndicat mixte | | 7356 | Administrations, Instituions | Commission syndicale pour la gestion des biens indivis des communes | | 7361 | Administrations, Instituions | Centre communal d&#39;action sociale | | 7362 | Administrations, Instituions | Caisse des écoles | | 7363 | Administrations, Instituions | Caisse de crédit municipal | | 7364 | Administrations, Instituions | Etablissement d&#39;hospitalisation | | 7365 | Administrations, Instituions | Syndicat inter hospitalier | | 7366 | Administrations, Instituions | Etablissement public local social et médico-social | | 7371 | Administrations, Instituions | Office public d&#39;habitation à loyer modéré (OPHLM) | | 7372 | Administrations, Instituions | Service départemental d&#39;incendie | | 7373 | Administrations, Instituions | Etablissement public local culturel | | 7378 | Administrations, Instituions | Régie d&#39;une collectivité locale à caractère administratif | | 7379 | Administrations, Instituions | (Autre) Etablissement public administratif local | | 7381 | Administrations, Instituions | Organisme consulaire | | 7382 | Administrations, Instituions | Etablissement public national ayant fonction d&#39;administration centrale | | 7383 | Administrations, Instituions | Etablissement public national à caractère scientifique  culturel et professionnel | | 7384 | Administrations, Instituions | Autre établissement public national d&#39;enseignement | | 7385 | Administrations, Instituions | Autre établissement public national administratif à compétence territoriale limitée | | 7389 | Administrations, Instituions | Etablissement public national à caractère administratif | | 7410 | Administrations, Instituions | Groupement d&#39;intérêt public (GIP) | | 7430 | Administrations, Instituions | Etablissement public des cultes d&#39;Alsace-Lorraine | | 7450 | Administrations, Instituions | Etablissement public, cercle et foyer dans les armées | | 7470 | Administrations, Instituions | Groupement de coopération sanitaire à gestion publique | | 7490 | Administrations, Instituions | Autre personne morale de droit administratif | | 8110 | Administrations, Instituions | Régime général de la sécurité sociale | | 8120 | Administrations, Instituions | Régime spécial de sécurité sociale | | 8130 | Administrations, Instituions | Institution de retraite complémentaire | | 8140 | Administrations, Instituions | Mutualité sociale agricole | | 8150 | Administrations, Instituions | Régime maladie des non-salariés non agricoles | | 8160 | Administrations, Instituions | Régime vieillesse ne dépendant pas du régime général de la sécurité sociale | | 8170 | Administrations, Instituions | Régime d&#39;assurance chômage | | 8190 | Administrations, Instituions | Autre régime de prévoyance sociale | | 8210 | De facto undivided ownership company | Mutuelle | | 8250 | De facto undivided ownership company | Assurance mutuelle agricole | | 8290 | De facto undivided ownership company | Autre organisme mutualiste | | 8310 | Association fondation | Comité central d&#39;entreprise | | 8311 | Association fondation | Comité d&#39;établissement | | 8410 | Association fondation | Syndicat de salariés | | 8420 | Association fondation | Syndicat patronal | | 8450 | Association fondation | Ordre professionnel ou assimilé | | 8470 | Association fondation | Centre technique industriel ou comité professionnel du développement économique | | 8490 | Association fondation | Autre organisme professionnel | | 8510 | Administrations, Instituions | Institution de prévoyance | | 8520 | Administrations, Instituions | Institution de retraite supplémentaire | | 9110 | Condominium syndicate | Syndicat de copropriété | | 9150 | Association fondation | Association syndicale libre | | 9210 | Association fondation | Association non déclarée | | 9220 | Association fondation | Association déclarée | | 9221 | Association fondation | Association déclarée \&quot;entreprises d&#39;insertion par l&#39;économique\&quot; | | 9222 | Association fondation | Association intermédiaire | | 9223 | Association fondation | Groupement d&#39;employeurs | | 9224 | Association fondation | Association d&#39;avocats à responsabilité professionnelle individuelle | | 9230 | Association fondation | Association déclarée  reconnue d&#39;utilité publique | | 9240 | Association fondation | Congrégation | | 9260 | Association fondation | Association de droit local | | 9300 | Association fondation | Fondation | | 9900 | Diverse | Autre personne morale de droit privé | | 9970 | Diverse | Groupement de coopération sanitaire à gestion privée | 
    # @option opts [Integer] :legal_share_capital Business share capital
    # @option opts [String] :legal_sector Business sector. NAF code in France
    # @option opts [String] :legal_annual_turn_over Business annual turnover (in k€)
    # @option opts [String] :legal_net_income_range Business net income range (in k€)
    # @option opts [String] :legal_number_of_employee_range Business number of employees range
    # @option opts [Integer] :effective_beneficiary Business effective beneficiary
    # @option opts [String] :language User&#39;s prefered language (ISO 639-1)
    # @option opts [String] :tax_number User&#39;s tax identification number. If the taxResidence is not set to FR, the field is mandatory.
    # @option opts [String] :tax_residence User&#39;s tax residence country code (2 char code following ISO 3166 norm).
    # @option opts [String] :position User&#39;s position  (deprecated, you must use the parameter occupation).
    # @option opts [String] :personal_assets User&#39;s personal assets range expressed in k€.
    # @option opts [String] :personal_assets_range 
    # @return [Array<(InlineResponse20026, Fixnum, Hash)>] InlineResponse20026 data, response status code and response headers
    def put_user_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.put_user ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserApi.put_user"
      end
      if @api_client.config.client_side_validation && opts[:'income_range'] && !['0-18', '19-23', '24-27', '28-35', '36-56', '57-*'].include?(opts[:'income_range'])
        fail ArgumentError, 'invalid value for "income_range", must be one of 0-18, 19-23, 24-27, 28-35, 36-56, 57-*'
      end
      if @api_client.config.client_side_validation && opts[:'legal_form'] && !['1000', '1100', '1200', '1300', '1400', '1500', '1600', '1700', '1800', '1900', '2110', '2120', '2210', '2220', '2310', '2320', '2385', '2400', '2700', '2900', '3110', '3120', '3205', '3210', '3220', '3290', '4110', '4120', '4130', '4140', '4150', '4160', '5191', '5192', '5193', '5194', '5195', '5196', '5202', '5203', '5306', '5307', '5308', '5309', '5385', '5410', '5415', '5422', '5426', '5430', '5431', '5432', '5442', '5443', '5451', '5453', '5454', '5455', '5458', '5459', '5460', '5485', '5498', '5499', '5505', '5510', '5515', '5520', '5522', '5525', '5530', '5531', '5532', '5542', '5543', '5546', '5547', '5548', '5551', '5552', '5553', '5554', '5555', '5558', '5559', '5560', '5585', '5599', '5605', '5610', '5615', '5620', '5622', '5625', '5630', '5631', '5632', '5642', '5643', '5646', '5647', '5648', '5651', '5652', '5653', '5654', '5655', '5658', '5659', '5660', '5685', '5699', '5710', '5720', '5785', '5800', '6100', '6210', '6220', '6316', '6317', '6318', '6411', '6521', '6532', '6533', '6534', '6535', '6536', '6537', '6538', '6539', '6540', '6541', '6542', '6543', '6544', '6551', '6554', '6558', '6560', '6561', '6562', '6563', '6564', '6565', '6566', '6567', '6568', '6569', '6571', '6572', '6573', '6574', '6575', '6576', '6577', '6578', '6585', '6588', '6589', '6595', '6596', '6597', '6598', '6599', '6901', '7111', '7112', '7113', '7120', '7150', '7160', '7171', '7172', '7179', '7190', '7210', '7220', '7225', '7229', '7230', '7312', '7313', '7314', '7321', '7322', '7323', '7331', '7340', '7341', '7342', '7343', '7344', '7345', '7346', '7347', '7348', '7349', '7351', '7352', '7353', '7354', '7355', '7356', '7361', '7362', '7363', '7364', '7365', '7366', '7371', '7372', '7373', '7378', '7379', '7381', '7382', '7383', '7384', '7385', '7389', '7410', '7430', '7450', '7470', '7490', '8110', '8120', '8130', '8140', '8150', '8160', '8170', '8190', '8210', '8250', '8290', '8310', '8311', '8410', '8420', '8450', '8470', '8490', '8510', '8520', '9110', '9150', '9210', '9220', '9221', '9222', '9223', '9224', '9230', '9240', '9260', '9300', '9900', '9970'].include?(opts[:'legal_form'])
        fail ArgumentError, 'invalid value for "legal_form", must be one of 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2110, 2120, 2210, 2220, 2310, 2320, 2385, 2400, 2700, 2900, 3110, 3120, 3205, 3210, 3220, 3290, 4110, 4120, 4130, 4140, 4150, 4160, 5191, 5192, 5193, 5194, 5195, 5196, 5202, 5203, 5306, 5307, 5308, 5309, 5385, 5410, 5415, 5422, 5426, 5430, 5431, 5432, 5442, 5443, 5451, 5453, 5454, 5455, 5458, 5459, 5460, 5485, 5498, 5499, 5505, 5510, 5515, 5520, 5522, 5525, 5530, 5531, 5532, 5542, 5543, 5546, 5547, 5548, 5551, 5552, 5553, 5554, 5555, 5558, 5559, 5560, 5585, 5599, 5605, 5610, 5615, 5620, 5622, 5625, 5630, 5631, 5632, 5642, 5643, 5646, 5647, 5648, 5651, 5652, 5653, 5654, 5655, 5658, 5659, 5660, 5685, 5699, 5710, 5720, 5785, 5800, 6100, 6210, 6220, 6316, 6317, 6318, 6411, 6521, 6532, 6533, 6534, 6535, 6536, 6537, 6538, 6539, 6540, 6541, 6542, 6543, 6544, 6551, 6554, 6558, 6560, 6561, 6562, 6563, 6564, 6565, 6566, 6567, 6568, 6569, 6571, 6572, 6573, 6574, 6575, 6576, 6577, 6578, 6585, 6588, 6589, 6595, 6596, 6597, 6598, 6599, 6901, 7111, 7112, 7113, 7120, 7150, 7160, 7171, 7172, 7179, 7190, 7210, 7220, 7225, 7229, 7230, 7312, 7313, 7314, 7321, 7322, 7323, 7331, 7340, 7341, 7342, 7343, 7344, 7345, 7346, 7347, 7348, 7349, 7351, 7352, 7353, 7354, 7355, 7356, 7361, 7362, 7363, 7364, 7365, 7366, 7371, 7372, 7373, 7378, 7379, 7381, 7382, 7383, 7384, 7385, 7389, 7410, 7430, 7450, 7470, 7490, 8110, 8120, 8130, 8140, 8150, 8160, 8170, 8190, 8210, 8250, 8290, 8310, 8311, 8410, 8420, 8450, 8470, 8490, 8510, 8520, 9110, 9150, 9210, 9220, 9221, 9222, 9223, 9224, 9230, 9240, 9260, 9300, 9900, 9970'
      end
      if @api_client.config.client_side_validation && opts[:'legal_annual_turn_over'] && !['0-39', '40-99', '100-249', '250-999', '1000-2999', '3000-9999', '10000-99999', '100000-*'].include?(opts[:'legal_annual_turn_over'])
        fail ArgumentError, 'invalid value for "legal_annual_turn_over", must be one of 0-39, 40-99, 100-249, 250-999, 1000-2999, 3000-9999, 10000-99999, 100000-*'
      end
      if @api_client.config.client_side_validation && opts[:'legal_net_income_range'] && !['0-4', '5-9', '10-49', '50-149', '150-499', '500-*'].include?(opts[:'legal_net_income_range'])
        fail ArgumentError, 'invalid value for "legal_net_income_range", must be one of 0-4, 5-9, 10-49, 50-149, 150-499, 500-*'
      end
      if @api_client.config.client_side_validation && opts[:'legal_number_of_employee_range'] && !['0', '1-9', '10-99', '100-249', '250-*'].include?(opts[:'legal_number_of_employee_range'])
        fail ArgumentError, 'invalid value for "legal_number_of_employee_range", must be one of 0, 1-9, 10-99, 100-249, 250-*'
      end
      if @api_client.config.client_side_validation && opts[:'personal_assets'] && !['0-2', '3-22', '23-128', '129-319', '320-464', '465-'].include?(opts[:'personal_assets'])
        fail ArgumentError, 'invalid value for "personal_assets", must be one of 0-2, 3-22, 23-128, 129-319, 320-464, 465-'
      end
      # resource path
      local_var_path = '/users/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'accessSignature'] = opts[:'access_signature'] if !opts[:'access_signature'].nil?
      query_params[:'accessTag'] = opts[:'access_tag'] if !opts[:'access_tag'].nil?
      query_params[:'accessUserId'] = opts[:'access_user_id'] if !opts[:'access_user_id'].nil?
      query_params[:'accessUserIp'] = opts[:'access_user_ip'] if !opts[:'access_user_ip'].nil?
      query_params[:'userTag'] = opts[:'user_tag'] if !opts[:'user_tag'].nil?
      query_params[:'specifiedUSPerson'] = opts[:'specified_us_person'] if !opts[:'specified_us_person'].nil?
      query_params[:'controllingPersonType'] = opts[:'controlling_person_type'] if !opts[:'controlling_person_type'].nil?
      query_params[:'employeeType'] = opts[:'employee_type'] if !opts[:'employee_type'].nil?
      query_params[:'title'] = opts[:'title'] if !opts[:'title'].nil?
      query_params[:'firstname'] = opts[:'firstname'] if !opts[:'firstname'].nil?
      query_params[:'lastname'] = opts[:'lastname'] if !opts[:'lastname'].nil?
      query_params[:'middleNames'] = opts[:'middle_names'] if !opts[:'middle_names'].nil?
      query_params[:'birthday'] = opts[:'birthday'] if !opts[:'birthday'].nil?
      query_params[:'email'] = opts[:'email'] if !opts[:'email'].nil?
      query_params[:'address1'] = opts[:'address1'] if !opts[:'address1'].nil?
      query_params[:'address2'] = opts[:'address2'] if !opts[:'address2'].nil?
      query_params[:'postcode'] = opts[:'postcode'] if !opts[:'postcode'].nil?
      query_params[:'city'] = opts[:'city'] if !opts[:'city'].nil?
      query_params[:'state'] = opts[:'state'] if !opts[:'state'].nil?
      query_params[:'country'] = opts[:'country'] if !opts[:'country'].nil?
      query_params[:'phone'] = opts[:'phone'] if !opts[:'phone'].nil?
      query_params[:'mobile'] = opts[:'mobile'] if !opts[:'mobile'].nil?
      query_params[:'nationality'] = opts[:'nationality'] if !opts[:'nationality'].nil?
      query_params[:'nationalityOther'] = opts[:'nationality_other'] if !opts[:'nationality_other'].nil?
      query_params[:'placeOfBirth'] = opts[:'place_of_birth'] if !opts[:'place_of_birth'].nil?
      query_params[:'birthCountry'] = opts[:'birth_country'] if !opts[:'birth_country'].nil?
      query_params[:'occupation'] = opts[:'occupation'] if !opts[:'occupation'].nil?
      query_params[:'occupationCategory'] = opts[:'occupation_category'] if !opts[:'occupation_category'].nil?
      query_params[:'incomeRange'] = opts[:'income_range'] if !opts[:'income_range'].nil?
      query_params[:'monthlyIncomeRange'] = opts[:'monthly_income_range'] if !opts[:'monthly_income_range'].nil?
      query_params[:'legalName'] = opts[:'legal_name'] if !opts[:'legal_name'].nil?
      query_params[:'legalRegistrationNumber'] = opts[:'legal_registration_number'] if !opts[:'legal_registration_number'].nil?
      query_params[:'legalTvaNumber'] = opts[:'legal_tva_number'] if !opts[:'legal_tva_number'].nil?
      query_params[:'legalRegistrationDate'] = opts[:'legal_registration_date'] if !opts[:'legal_registration_date'].nil?
      query_params[:'legalForm'] = opts[:'legal_form'] if !opts[:'legal_form'].nil?
      query_params[:'legalShareCapital'] = opts[:'legal_share_capital'] if !opts[:'legal_share_capital'].nil?
      query_params[:'legalSector'] = opts[:'legal_sector'] if !opts[:'legal_sector'].nil?
      query_params[:'legalAnnualTurnOver'] = opts[:'legal_annual_turn_over'] if !opts[:'legal_annual_turn_over'].nil?
      query_params[:'legalNetIncomeRange'] = opts[:'legal_net_income_range'] if !opts[:'legal_net_income_range'].nil?
      query_params[:'legalNumberOfEmployeeRange'] = opts[:'legal_number_of_employee_range'] if !opts[:'legal_number_of_employee_range'].nil?
      query_params[:'effectiveBeneficiary'] = opts[:'effective_beneficiary'] if !opts[:'effective_beneficiary'].nil?
      query_params[:'language'] = opts[:'language'] if !opts[:'language'].nil?
      query_params[:'taxNumber'] = opts[:'tax_number'] if !opts[:'tax_number'].nil?
      query_params[:'taxResidence'] = opts[:'tax_residence'] if !opts[:'tax_residence'].nil?
      query_params[:'position'] = opts[:'position'] if !opts[:'position'].nil?
      query_params[:'personalAssets'] = opts[:'personal_assets'] if !opts[:'personal_assets'].nil?
      query_params[:'personalAssetsRange'] = opts[:'personal_assets_range'] if !opts[:'personal_assets_range'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20026')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#put_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # create user
    # Create a new user in the system.
    # @param specified_us_person Est considéré comme ayant la nationalité ou la citoyenneté américaine : Tout citoyen des États-Unis : une personne est présumée citoyen des États-Unis dès lors qu’elle possède un passeport américain ou qu’elle est née sur le territoire des Etats-Unis, même lorsqu’un tel lieu de naissance figure sur un passeport d’un autre pays, ou que la personne possède également une autre nationalité ou a sa résidence dans un autre pays. Une condition néanmoins : la personne ne doit pas avoir renoncé à la citoyenneté américaine ; • Tout résident légal des États-Unis, quelle que soit sa nationalité : (i) quiconque est considéré comme résident fiscal aux États-Unis aux termes de la loi fédérale américaine, (ii) quiconque demande à être traité comme résident fiscal aux États-Unis, ou (iii) quiconque est considéré comme résident fiscal aux termes de la loi de cet État américain. • Toute personne titulaire d’une carte de séjour permanent (green card) aux États-Unis ou résidant de façon permanente aux États-Unis ou y ayant passé une période suffisamment longue au cours des trois dernières années :  | Value | Type | | --- | --- | | 0 | No | | 1 | Yes | 
    # @param email User&#39;s email address (must be valid).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_signature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
    # @option opts [String] :access_tag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
    # @option opts [Integer] :access_user_id Access user&#39;s id is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @option opts [String] :access_user_ip Access user&#39;s ip is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @option opts [Integer] :user_type_id User&#39;s type. Possible values:  | Value | Type | | --- | --- | | 1 | Natural person (default)| | 2 | Business entity | | 3 | Non - governmental organization | | 4 | Governmental organization | 
    # @option opts [String] :user_tag Custom data.
    # @option opts [Integer] :parent_user_id User id of user&#39;s parent if any.
    # @option opts [String] :parent_type Type of bound between parent and current user : * shareholder * employee * leader  (deprecated you must use the controllingPersonType and employeeType parameters) 
    # @option opts [Integer] :controlling_person_type Type of relationship :  | Value | Type | | --- | --- | | 1 | Shareholder | | 2 | Other_relationship | | 3 | Director | | 4 | None (default) | 
    # @option opts [Integer] :employee_type Type of user&#39;s role :  | Value | Type | | --- | --- | | 1 | Leader | | 2 | Employee | | 3 | None (default)| 
    # @option opts [Integer] :entity_type Type of user&#39;s entity type :      | Value | Type |     | --- | --- |     | 1 | Reporting Financial Institution |     | 2 | Non-Reporting Financial Institution |     | 3 | Active Non-Financial Entity - Governmental entities, Int. organizations |     | 4 | Active Non-Financial Entity - Other |     | 5 | Passive Non-Financial Entity - Investment entity that is not Participating Jurisdiction FI | 
    # @option opts [String] :title User&#39;s title. Possible values: * M * MME * MLLE 
    # @option opts [String] :firstname User&#39;s first name
    # @option opts [String] :lastname User&#39;s last name
    # @option opts [String] :middle_names User&#39;s middle names
    # @option opts [String] :birthday User&#39;s birth date. Format YYYY-MM-DD
    # @option opts [String] :address1 User&#39;s postal address (main). Can not contain carriage return.
    # @option opts [String] :address2 User&#39;s postal address (complement). Can not contain carriage return.
    # @option opts [String] :postcode User&#39;s postcode
    # @option opts [String] :city User&#39;s city
    # @option opts [String] :state User&#39;s state
    # @option opts [String] :country User&#39;s country
    # @option opts [String] :phone User&#39;s phone number
    # @option opts [String] :mobile User&#39;s mobile phone number
    # @option opts [String] :nationality User&#39;s nationality
    # @option opts [String] :nationality_other User&#39;s other nationality
    # @option opts [String] :place_of_birth User&#39;s place of birth
    # @option opts [String] :birth_country User&#39;s country of birth
    # @option opts [String] :occupation User&#39;s occupation
    # @option opts [String] :income_range Customer income range
    # @option opts [String] :legal_name Business name
    # @option opts [String] :legal_registration_number Business registration number
    # @option opts [String] :legal_tva_number Business VAT number
    # @option opts [Date] :legal_registration_date Business registration date
    # @option opts [String] :legal_form | Code | Category | Details (in french) | | ---- | ----- | ---- | | 1000 | Individual company | Entrepreneur Individuel a Responsabilité Limitée (EIRL) | | 1100 | Individual company | Artisan-Commerçant | | 1200 | Individual company | Commerçant | | 1300 | Individual company | Artisan | | 1400 | Liberal profession | Officier public ou ministériel | | 1500 | Liberal profession | Profession libérale | | 1600 | Farm operator  | Exploitant agricole | | 1700 | Liberal profession | Agent commercial | | 1800 | Partner Director | Associé-gérant | | 1900 | Individual company | Personne physique | | 2110 | Indivision and others | Indivision entre personnes physiques | | 2120 | Indivision and others | Indivision avec personne morale | | 2210 | Indivision and others | Société créée de fait entre personnes physiques | | 2220 | Indivision and others | Société créée de fait avec personne morale | | 2310 | Indivision and others | Société en participation entre personnes physiques | | 2320 | Indivision and others | Société en participation avec personne morale | | 2385 | Indivision and others | Société en participation de professions libérales | | 2400 | Indivision and others | Fiducie | | 2700 | Diverse | Paroisse hors zone concordataire | | 2900 | Economic Interest Grouping | Autre groupement de droit privé non doté de la personnalité morale | | 3110 | Foreign company | Représentation ou agence commerciale d&#39;état ou organisme public étranger  immatriculé au RCS | | 3120 | Foreign company | Société étrangère immatriculée au RCS | | 3205 | Foreign company | Organisation internationale | | 3210 | Foreign company | Etat collectivité ou établissement public étranger | | 3220 | Foreign company | Société étrangère non immatriculée au RCS | | 3290 | Foreign company | (Autre) personne morale de droit étranger | | 4110 | Administrations, Instituions | Etablissement public national à caractère industriel ou commercial doté d&#39;un comptable public | | 4120 | Administrations, Instituions | Etablissement public national à caractère industriel ou commercial non doté d&#39;un comptable public | | 4130 | Administrations, Instituions | Exploitant public | | 4140 | Administrations, Instituions | Etablissement public local à caractère industriel ou commercial | | 4150 | Administrations, Instituions | Régie d&#39;une collectivité locale à caractère industriel ou commercial | | 4160 | Administrations, Instituions | Institution Banque de France | | 5191 | De facto undivided ownership company | Société de caution mutuelle | | 5192 | Diverse | Société coopérative de banque populaire | | 5193 | De facto undivided ownership company | Caisse de crédit maritime mutuel | | 5194 | De facto undivided ownership company | Caisse (fédérale) de crédit mutuel | | 5195 | Association fondation | Association coopérative inscrite (droit local Alsace Moselle) | | 5196 | De facto undivided ownership company | Caisse d&#39;épargne et de prévoyance à forme coopérative | | 5202 | General partnership | Société en nom collectif | | 5203 | General partnership | Société en nom collectif coopérative | | 5306 | Limited company | Société en commandite simple | | 5307 | Limited company | Société en commandite simple coopérative | | 5308 | Limited company | Société en commandite par actions | | 5309 | Limited company | Société en commandite par actions coopérative | | 5385 | Limited company | Société d&#39;exercice libéral en commandite par action | | 5410 | Limited Liability Company  | SARL nationale | | 5415 | Limited Liability Company  | SARL d&#39;économie mixte | | 5422 | Limited Liability Company  | SARL immobilière pour le commerce et l&#39;industrie (SICOMI) | | 5426 | Limited Liability Company  | Société immobilière de gestion | | 5430 | Limited Liability Company  | Safer en SARL | | 5431 | Limited Liability Company  | SARL mixte d&#39;intérêt agricole (SIMA) | | 5432 | Limited Liability Company  | SARL d&#39;intérêt collectif agricole (SICA) | | 5442 | Limited Liability Company  | SARL d&#39;attribution | | 5443 | Limited Liability Company  | SARL coopérative de construction | | 5451 | Limited Liability Company  | SARL coopérative de consommation | | 5453 | Limited Liability Company  | SARL coopérative artisanale | | 5454 | Limited Liability Company  | SARL coopérative d&#39;intérêt maritime | | 5455 | Limited Liability Company  | SARL coopérative de transports | | 5458 | Limited Liability Company  | SARL coopérative ouvrière de production et de crédit (SCOP) | | 5459 | Limited Liability Company  | SARL union de sociétés coopératives | | 5460 | Limited Liability Company  | SARL coopérative | | 5485 | Limited Liability Company  | Société d&#39;exercice libéral à responsabilité limitée | | 5498 | Limited Liability Company  | SARL unipersonnelle | | 5499 | Limited Liability Company  | SARL | | 5505 | Limited company | SA à participation ouvrière à conseil d&#39;administration | | 5510 | Limited company | SA nationale à conseil d&#39;administration | | 5515 | Limited company | SA d&#39;économie mixte à conseil d&#39;administration | | 5520 | Limited company | Société d&#39;investissement à capital variable (SICAV) à conseil d&#39;administration | | 5522 | Limited company | Société anonyme immobilière pour le commerce et l&#39;industrie (SICOMI)  à conseil d&#39;administration | | 5525 | Limited company | Société anonyme immobilière d&#39;investissement à conseil d&#39;administration | | 5530 | Limited company | Safer anonyme à conseil d&#39;administration | | 5531 | Limited company | Société anonyme mixte d&#39;intérêt agricole (SMIA) à conseil d&#39;administration | | 5532 | Limited company | Société anonyme mixte d&#39;intérêt collectif agricole (SICA) à conseil d&#39;administration | | 5542 | Limited company | Société anonyme d&#39;attribution à conseil d&#39;administration | | 5543 | Limited company | Société anonyme coopérative de construction à conseil d&#39;administration | | 5546 | Limited company | SA de HLM à conseil d&#39;administration | | 5547 | Limited company | SA coopérative de production de HLM à conseil d&#39;administration | | 5548 | Limited company | SA de crédit immobilier à conseil d&#39;administration | | 5551 | Limited company | SA coopérative de consommation à conseil d&#39;administration | | 5552 | Limited company | SA coopérative de commerçants détaillants à conseil d&#39;administration | | 5553 | Limited company | SA coopérative artisanale à conseil d&#39;administration | | 5554 | Limited company | SA coopérative (d&#39;intérêt) maritime à conseil d&#39;administration | | 5555 | Limited company | SA coopérative de transports à conseil d&#39;administration | | 5558 | Limited company | SCOP à conseil d&#39;administration | | 5559 | Limited company | SA union de sociétés coopératives à conseil d&#39;administration | | 5560 | Limited company | SA coopérative à conseil d&#39;administration | | 5585 | Limited company | Société d&#39;exercice libéral à forme anonyme à conseil d&#39;administration | | 5599 | Limited company | SA à conseil d&#39;administration | | 5605 | Limited company | SA à participation ouvrière à directoire | | 5610 | Limited company | SA nationale à directoire | | 5615 | Limited company | SA d&#39;économie mixte à directoire | | 5620 | Limited company | SICAV | | 5622 | Limited company | SICOMI | | 5625 | Limited company | Société immobilière d&#39;investissement anonyme à directoire | | 5630 | Limited company | Safer anonyme à directoire | | 5631 | Limited company | Société anonyme mixte d&#39;intérêt agricole (SMIA) | | 5632 | Limited company | SICA | | 5642 | Limited company | Société anonyme d&#39;attribution à directoire | | 5643 | Limited company | Société anonyme coopérative de construction à directoire | | 5646 | Limited company | S.A. HLM à directoire | | 5647 | Limited company | Société coopérative de production de HLM anonyme à directoire | | 5648 | Limited company | SA de crédit immobilier à directoire | | 5651 | Limited company | SA coopérative de consommation à directoire | | 5652 | Limited company | SA coopérative de commerçants détaillants à directoire | | 5653 | Limited company | SA coopérative artisanale à directoire | | 5654 | Limited company | SA coopérative (d&#39;intérêt) maritime à directoire | | 5655 | Limited company | SA coopérative de transport à directoire | | 5658 | Limited company | SCOP | | 5659 | Limited company | SA union de sociétés coopératives à directoire | | 5660 | Limited company | SA coopérative à directoire | | 5685 | Limited company | Société d&#39;exercice libéral à forme anonyme à directoire | | 5699 | Limited company | (Autre) SA à directoire | | 5710 | Limited company | SAS | | 5720 | Limited company | SASU | | 5785 | Limited company | Société d&#39;exercice libéral par action simplifiée | | 5800 | Diverse | Société européenne | | 6100 | De facto undivided ownership company | Caisse d&#39;épargne et de prévoyance | | 6210 | Economic Interest Grouping | GEIE | | 6220 | Economic Interest Grouping | GIE | | 6316 | Diverse | CUMA | | 6317 | Diverse | Société coopérative agricole | | 6318 | Diverse | Union de sociétés coopératives agricoles | | 6411 | De facto undivided ownership company | Société d&#39;assurance mutuelle | | 6521 | Civils companies (without SCI) | SCPI | | 6532 | Civils companies (without SCI) | SICA | | 6533 | Civils companies (without SCI) | GAEC | | 6534 | Civils companies (without SCI) | Groupement foncier agricole | | 6535 | Civils companies (without SCI) | Groupement agricole foncier | | 6536 | Civils companies (without SCI) | Groupement forestier | | 6537 | Civils companies (without SCI) | Groupement pastoral | | 6538 | Civils companies (without SCI) | Groupement foncier rural | | 6539 | Civils companies (without SCI) | Société civile foncière | | 6540 | Civils companies | SCI | | 6541 | Civils companies | SCI de construction vente | | 6542 | Civils companies (without SCI) | Société civile d&#39;attribution | | 6543 | Civils companies (without SCI) | Société civile coopérative de construction | | 6544 | Civils companies | Société civile d&#39;accession progressive à la propriété | | 6551 | Civils companies (without SCI) | Société civile coopérative de consommation | | 6554 | Civils companies (without SCI) | Société civile coopérative (d&#39;intérêt) maritime | | 6558 | Civils companies (without SCI) | Société civile coopérative entre médecins | | 6560 | Civils companies (without SCI) | SCP | | 6561 | Civils companies (without SCI) | SCP d&#39;avocats | | 6562 | Civils companies (without SCI) | SCP d&#39;avocats aux conseil | | 6563 | Civils companies (without SCI) | SCP d&#39;avoués d&#39;appel | | 6564 | Civils companies (without SCI) | SCP d&#39;huissiers | | 6565 | Civils companies (without SCI) | SCP de notaires | | 6566 | Civils companies (without SCI) | SCP de commissaires-priseurs | | 6567 | Civils companies (without SCI) | SCP de greffiers de tribunal de commerce | | 6568 | Civils companies (without SCI) | SCP de conseils juridiques | | 6569 | Civils companies (without SCI) | SCP de commissaires aux comptes | | 6571 | Civils companies (without SCI) | SCP de médecins | | 6572 | Civils companies (without SCI) | SCP de dentistes | | 6573 | Civils companies (without SCI) | SCP d&#39;infirmiers | | 6574 | Civils companies (without SCI) | SCP de masseurs kinésithérapeutes | | 6575 | Civils companies (without SCI) | SCP de directeurs de laboratoire d&#39;analyse médicale | | 6576 | Civils companies (without SCI) | SCP de vétérinaires | | 6577 | Civils companies (without SCI) | SCP de géomètres-experts | | 6578 | Civils companies (without SCI) | SCP d&#39;architectes | | 6585 | Civils companies (without SCI) | SCP | | 6588 | Civils companies (without SCI) | Société civile laitière | | 6589 | Civils companies (without SCI) | Société civile de moyens | | 6595 | Civils companies (without SCI) | Caisse (locale) de crédit mutuel | | 6596 | Civils companies (without SCI) | Caisse de crédit agricole mutuel | | 6597 | Civils companies (without SCI) | Société civile d&#39;exploitation agricole | | 6598 | Farm operator  | Exploitation agricole à responsabilité limitée | | 6599 | Civils companies (without SCI) | Autre société civile | | 6901 | Diverse | Autres personnes de droit privé inscrites au registre du commerce et des sociétés | | 7111 | Administrations, Instituions | Autorité constitutionnelle | | 7112 | Administrations, Instituions | Autorité administrative indépendante | | 7113 | Administrations, Instituions | Ministère | | 7120 | Administrations, Instituions | Service central d&#39;un ministère | | 7150 | Administrations, Instituions | Service du ministère de la Défense | | 7160 | Administrations, Instituions | Service déconcentré à compétence nation . D&#39;un ministère (hors Défense) | | 7171 | Administrations, Instituions | Service déconcentré de l&#39;Etat à compétence (inter) régionale | | 7172 | Administrations, Instituions | Service déconcentré de l&#39;Etat à compétence (inter) départementale | | 7179 | Administrations, Instituions | (Autre) Service déconcentré de l&#39;Etat à compétence territoriale | | 7190 | Administrations, Instituions | Ecole nationale non dotée de la personnalité morale | | 7210 | Administrations, Instituions | Commune | | 7220 | Administrations, Instituions | Département | | 7225 | Administrations, Instituions | Territoire d&#39;Outre-Mer | | 7229 | Administrations, Instituions | (Autre) Collectivité territoriale | | 7230 | Administrations, Instituions | Région | | 7312 | Administrations, Instituions | Commune associée | | 7313 | Administrations, Instituions | Section de commune | | 7314 | Administrations, Instituions | Ensemble urbain | | 7321 | Administrations, Instituions | Association syndicale autorisée | | 7322 | Administrations, Instituions | Association foncière urbaine | | 7323 | Administrations, Instituions | Association foncière de remembrement | | 7331 | Administrations, Instituions | Etablissement public local d&#39;enseignement | | 7340 | Administrations, Instituions | Pôle métropolitain | | 7341 | Administrations, Instituions | Secteur de commune | | 7342 | Administrations, Instituions | District urbain | | 7343 | Administrations, Instituions | Communauté urbaine | | 7344 | Administrations, Instituions | Métropole | | 7345 | Administrations, Instituions | Syndicat intercommunal à vocation multiple (SIVOM) | | 7346 | Administrations, Instituions | Communauté de commune | | 7347 | Administrations, Instituions | Communauté de villes | | 7348 | Administrations, Instituions | Communauté d&#39;agglomération | | 7349 | Administrations, Instituions | Autre établissement public local de coopération non spécialisé ou entente | | 7351 | Administrations, Instituions | Institution interdépartementale ou entente | | 7352 | Administrations, Instituions | Institution interrégionale ou entente | | 7353 | Administrations, Instituions | Syndicat intercommunal à vocation unique (SIVU) | | 7354 | Administrations, Instituions | Syndicat mixte communal | | 7355 | Administrations, Instituions | Autre syndicat mixte | | 7356 | Administrations, Instituions | Commission syndicale pour la gestion des biens indivis des communes | | 7361 | Administrations, Instituions | Centre communal d&#39;action sociale | | 7362 | Administrations, Instituions | Caisse des écoles | | 7363 | Administrations, Instituions | Caisse de crédit municipal | | 7364 | Administrations, Instituions | Etablissement d&#39;hospitalisation | | 7365 | Administrations, Instituions | Syndicat inter hospitalier | | 7366 | Administrations, Instituions | Etablissement public local social et médico-social | | 7371 | Administrations, Instituions | Office public d&#39;habitation à loyer modéré (OPHLM) | | 7372 | Administrations, Instituions | Service départemental d&#39;incendie | | 7373 | Administrations, Instituions | Etablissement public local culturel | | 7378 | Administrations, Instituions | Régie d&#39;une collectivité locale à caractère administratif | | 7379 | Administrations, Instituions | (Autre) Etablissement public administratif local | | 7381 | Administrations, Instituions | Organisme consulaire | | 7382 | Administrations, Instituions | Etablissement public national ayant fonction d&#39;administration centrale | | 7383 | Administrations, Instituions | Etablissement public national à caractère scientifique  culturel et professionnel | | 7384 | Administrations, Instituions | Autre établissement public national d&#39;enseignement | | 7385 | Administrations, Instituions | Autre établissement public national administratif à compétence territoriale limitée | | 7389 | Administrations, Instituions | Etablissement public national à caractère administratif | | 7410 | Administrations, Instituions | Groupement d&#39;intérêt public (GIP) | | 7430 | Administrations, Instituions | Etablissement public des cultes d&#39;Alsace-Lorraine | | 7450 | Administrations, Instituions | Etablissement public, cercle et foyer dans les armées | | 7470 | Administrations, Instituions | Groupement de coopération sanitaire à gestion publique | | 7490 | Administrations, Instituions | Autre personne morale de droit administratif | | 8110 | Administrations, Instituions | Régime général de la sécurité sociale | | 8120 | Administrations, Instituions | Régime spécial de sécurité sociale | | 8130 | Administrations, Instituions | Institution de retraite complémentaire | | 8140 | Administrations, Instituions | Mutualité sociale agricole | | 8150 | Administrations, Instituions | Régime maladie des non-salariés non agricoles | | 8160 | Administrations, Instituions | Régime vieillesse ne dépendant pas du régime général de la sécurité sociale | | 8170 | Administrations, Instituions | Régime d&#39;assurance chômage | | 8190 | Administrations, Instituions | Autre régime de prévoyance sociale | | 8210 | De facto undivided ownership company | Mutuelle | | 8250 | De facto undivided ownership company | Assurance mutuelle agricole | | 8290 | De facto undivided ownership company | Autre organisme mutualiste | | 8310 | Association fondation | Comité central d&#39;entreprise | | 8311 | Association fondation | Comité d&#39;établissement | | 8410 | Association fondation | Syndicat de salariés | | 8420 | Association fondation | Syndicat patronal | | 8450 | Association fondation | Ordre professionnel ou assimilé | | 8470 | Association fondation | Centre technique industriel ou comité professionnel du développement économique | | 8490 | Association fondation | Autre organisme professionnel | | 8510 | Administrations, Instituions | Institution de prévoyance | | 8520 | Administrations, Instituions | Institution de retraite supplémentaire | | 9110 | Condominium syndicate | Syndicat de copropriété | | 9150 | Association fondation | Association syndicale libre | | 9210 | Association fondation | Association non déclarée | | 9220 | Association fondation | Association déclarée | | 9221 | Association fondation | Association déclarée \&quot;entreprises d&#39;insertion par l&#39;économique\&quot; | | 9222 | Association fondation | Association intermédiaire | | 9223 | Association fondation | Groupement d&#39;employeurs | | 9224 | Association fondation | Association d&#39;avocats à responsabilité professionnelle individuelle | | 9230 | Association fondation | Association déclarée  reconnue d&#39;utilité publique | | 9240 | Association fondation | Congrégation | | 9260 | Association fondation | Association de droit local | | 9300 | Association fondation | Fondation | | 9900 | Diverse | Autre personne morale de droit privé | | 9970 | Diverse | Groupement de coopération sanitaire à gestion privée | 
    # @option opts [Integer] :legal_share_capital Business share capital
    # @option opts [String] :legal_sector Business sector. NAF code in France
    # @option opts [String] :legal_annual_turn_over Business annual turnover (in kâ‚¬)
    # @option opts [String] :legal_net_income_range Business net income range (in kâ‚¬)
    # @option opts [String] :legal_number_of_employee_range Business number of employees range
    # @option opts [Integer] :effective_beneficiary Business effective beneficiary
    # @option opts [String] :language User&#39;s prefered language (ISO 639-1)
    # @option opts [String] :tax_number User&#39;s tax identification number. If the taxResidence is set to another country than France, the field is mandatory. (deprecated, you must use the TaxResidence endpoint) 
    # @option opts [String] :tax_residence User&#39;s tax residence country code (2 char code following ISO 3166 norm). (deprecated, you must use the TaxResidence endpoint) 
    # @option opts [String] :position User&#39;s position (deprecated, you must use the parameter occupation).
    # @option opts [String] :personal_assets User&#39;s personal assets range exprimed in Kâ‚¬.
    # @return [InlineResponse20026]
    def put_users(specified_us_person, email, opts = {})
      data, _status_code, _headers = put_users_with_http_info(specified_us_person, email, opts)
      data
    end

    # create user
    # Create a new user in the system.
    # @param specified_us_person Est considéré comme ayant la nationalité ou la citoyenneté américaine : Tout citoyen des États-Unis : une personne est présumée citoyen des États-Unis dès lors qu’elle possède un passeport américain ou qu’elle est née sur le territoire des Etats-Unis, même lorsqu’un tel lieu de naissance figure sur un passeport d’un autre pays, ou que la personne possède également une autre nationalité ou a sa résidence dans un autre pays. Une condition néanmoins : la personne ne doit pas avoir renoncé à la citoyenneté américaine ; • Tout résident légal des États-Unis, quelle que soit sa nationalité : (i) quiconque est considéré comme résident fiscal aux États-Unis aux termes de la loi fédérale américaine, (ii) quiconque demande à être traité comme résident fiscal aux États-Unis, ou (iii) quiconque est considéré comme résident fiscal aux termes de la loi de cet État américain. • Toute personne titulaire d’une carte de séjour permanent (green card) aux États-Unis ou résidant de façon permanente aux États-Unis ou y ayant passé une période suffisamment longue au cours des trois dernières années :  | Value | Type | | --- | --- | | 0 | No | | 1 | Yes | 
    # @param email User&#39;s email address (must be valid).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_signature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
    # @option opts [String] :access_tag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
    # @option opts [Integer] :access_user_id Access user&#39;s id is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @option opts [String] :access_user_ip Access user&#39;s ip is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @option opts [Integer] :user_type_id User&#39;s type. Possible values:  | Value | Type | | --- | --- | | 1 | Natural person (default)| | 2 | Business entity | | 3 | Non - governmental organization | | 4 | Governmental organization | 
    # @option opts [String] :user_tag Custom data.
    # @option opts [Integer] :parent_user_id User id of user&#39;s parent if any.
    # @option opts [String] :parent_type Type of bound between parent and current user : * shareholder * employee * leader  (deprecated you must use the controllingPersonType and employeeType parameters) 
    # @option opts [Integer] :controlling_person_type Type of relationship :  | Value | Type | | --- | --- | | 1 | Shareholder | | 2 | Other_relationship | | 3 | Director | | 4 | None (default) | 
    # @option opts [Integer] :employee_type Type of user&#39;s role :  | Value | Type | | --- | --- | | 1 | Leader | | 2 | Employee | | 3 | None (default)| 
    # @option opts [Integer] :entity_type Type of user&#39;s entity type :      | Value | Type |     | --- | --- |     | 1 | Reporting Financial Institution |     | 2 | Non-Reporting Financial Institution |     | 3 | Active Non-Financial Entity - Governmental entities, Int. organizations |     | 4 | Active Non-Financial Entity - Other |     | 5 | Passive Non-Financial Entity - Investment entity that is not Participating Jurisdiction FI | 
    # @option opts [String] :title User&#39;s title. Possible values: * M * MME * MLLE 
    # @option opts [String] :firstname User&#39;s first name
    # @option opts [String] :lastname User&#39;s last name
    # @option opts [String] :middle_names User&#39;s middle names
    # @option opts [String] :birthday User&#39;s birth date. Format YYYY-MM-DD
    # @option opts [String] :address1 User&#39;s postal address (main). Can not contain carriage return.
    # @option opts [String] :address2 User&#39;s postal address (complement). Can not contain carriage return.
    # @option opts [String] :postcode User&#39;s postcode
    # @option opts [String] :city User&#39;s city
    # @option opts [String] :state User&#39;s state
    # @option opts [String] :country User&#39;s country
    # @option opts [String] :phone User&#39;s phone number
    # @option opts [String] :mobile User&#39;s mobile phone number
    # @option opts [String] :nationality User&#39;s nationality
    # @option opts [String] :nationality_other User&#39;s other nationality
    # @option opts [String] :place_of_birth User&#39;s place of birth
    # @option opts [String] :birth_country User&#39;s country of birth
    # @option opts [String] :occupation User&#39;s occupation
    # @option opts [String] :income_range Customer income range
    # @option opts [String] :legal_name Business name
    # @option opts [String] :legal_registration_number Business registration number
    # @option opts [String] :legal_tva_number Business VAT number
    # @option opts [Date] :legal_registration_date Business registration date
    # @option opts [String] :legal_form | Code | Category | Details (in french) | | ---- | ----- | ---- | | 1000 | Individual company | Entrepreneur Individuel a Responsabilité Limitée (EIRL) | | 1100 | Individual company | Artisan-Commerçant | | 1200 | Individual company | Commerçant | | 1300 | Individual company | Artisan | | 1400 | Liberal profession | Officier public ou ministériel | | 1500 | Liberal profession | Profession libérale | | 1600 | Farm operator  | Exploitant agricole | | 1700 | Liberal profession | Agent commercial | | 1800 | Partner Director | Associé-gérant | | 1900 | Individual company | Personne physique | | 2110 | Indivision and others | Indivision entre personnes physiques | | 2120 | Indivision and others | Indivision avec personne morale | | 2210 | Indivision and others | Société créée de fait entre personnes physiques | | 2220 | Indivision and others | Société créée de fait avec personne morale | | 2310 | Indivision and others | Société en participation entre personnes physiques | | 2320 | Indivision and others | Société en participation avec personne morale | | 2385 | Indivision and others | Société en participation de professions libérales | | 2400 | Indivision and others | Fiducie | | 2700 | Diverse | Paroisse hors zone concordataire | | 2900 | Economic Interest Grouping | Autre groupement de droit privé non doté de la personnalité morale | | 3110 | Foreign company | Représentation ou agence commerciale d&#39;état ou organisme public étranger  immatriculé au RCS | | 3120 | Foreign company | Société étrangère immatriculée au RCS | | 3205 | Foreign company | Organisation internationale | | 3210 | Foreign company | Etat collectivité ou établissement public étranger | | 3220 | Foreign company | Société étrangère non immatriculée au RCS | | 3290 | Foreign company | (Autre) personne morale de droit étranger | | 4110 | Administrations, Instituions | Etablissement public national à caractère industriel ou commercial doté d&#39;un comptable public | | 4120 | Administrations, Instituions | Etablissement public national à caractère industriel ou commercial non doté d&#39;un comptable public | | 4130 | Administrations, Instituions | Exploitant public | | 4140 | Administrations, Instituions | Etablissement public local à caractère industriel ou commercial | | 4150 | Administrations, Instituions | Régie d&#39;une collectivité locale à caractère industriel ou commercial | | 4160 | Administrations, Instituions | Institution Banque de France | | 5191 | De facto undivided ownership company | Société de caution mutuelle | | 5192 | Diverse | Société coopérative de banque populaire | | 5193 | De facto undivided ownership company | Caisse de crédit maritime mutuel | | 5194 | De facto undivided ownership company | Caisse (fédérale) de crédit mutuel | | 5195 | Association fondation | Association coopérative inscrite (droit local Alsace Moselle) | | 5196 | De facto undivided ownership company | Caisse d&#39;épargne et de prévoyance à forme coopérative | | 5202 | General partnership | Société en nom collectif | | 5203 | General partnership | Société en nom collectif coopérative | | 5306 | Limited company | Société en commandite simple | | 5307 | Limited company | Société en commandite simple coopérative | | 5308 | Limited company | Société en commandite par actions | | 5309 | Limited company | Société en commandite par actions coopérative | | 5385 | Limited company | Société d&#39;exercice libéral en commandite par action | | 5410 | Limited Liability Company  | SARL nationale | | 5415 | Limited Liability Company  | SARL d&#39;économie mixte | | 5422 | Limited Liability Company  | SARL immobilière pour le commerce et l&#39;industrie (SICOMI) | | 5426 | Limited Liability Company  | Société immobilière de gestion | | 5430 | Limited Liability Company  | Safer en SARL | | 5431 | Limited Liability Company  | SARL mixte d&#39;intérêt agricole (SIMA) | | 5432 | Limited Liability Company  | SARL d&#39;intérêt collectif agricole (SICA) | | 5442 | Limited Liability Company  | SARL d&#39;attribution | | 5443 | Limited Liability Company  | SARL coopérative de construction | | 5451 | Limited Liability Company  | SARL coopérative de consommation | | 5453 | Limited Liability Company  | SARL coopérative artisanale | | 5454 | Limited Liability Company  | SARL coopérative d&#39;intérêt maritime | | 5455 | Limited Liability Company  | SARL coopérative de transports | | 5458 | Limited Liability Company  | SARL coopérative ouvrière de production et de crédit (SCOP) | | 5459 | Limited Liability Company  | SARL union de sociétés coopératives | | 5460 | Limited Liability Company  | SARL coopérative | | 5485 | Limited Liability Company  | Société d&#39;exercice libéral à responsabilité limitée | | 5498 | Limited Liability Company  | SARL unipersonnelle | | 5499 | Limited Liability Company  | SARL | | 5505 | Limited company | SA à participation ouvrière à conseil d&#39;administration | | 5510 | Limited company | SA nationale à conseil d&#39;administration | | 5515 | Limited company | SA d&#39;économie mixte à conseil d&#39;administration | | 5520 | Limited company | Société d&#39;investissement à capital variable (SICAV) à conseil d&#39;administration | | 5522 | Limited company | Société anonyme immobilière pour le commerce et l&#39;industrie (SICOMI)  à conseil d&#39;administration | | 5525 | Limited company | Société anonyme immobilière d&#39;investissement à conseil d&#39;administration | | 5530 | Limited company | Safer anonyme à conseil d&#39;administration | | 5531 | Limited company | Société anonyme mixte d&#39;intérêt agricole (SMIA) à conseil d&#39;administration | | 5532 | Limited company | Société anonyme mixte d&#39;intérêt collectif agricole (SICA) à conseil d&#39;administration | | 5542 | Limited company | Société anonyme d&#39;attribution à conseil d&#39;administration | | 5543 | Limited company | Société anonyme coopérative de construction à conseil d&#39;administration | | 5546 | Limited company | SA de HLM à conseil d&#39;administration | | 5547 | Limited company | SA coopérative de production de HLM à conseil d&#39;administration | | 5548 | Limited company | SA de crédit immobilier à conseil d&#39;administration | | 5551 | Limited company | SA coopérative de consommation à conseil d&#39;administration | | 5552 | Limited company | SA coopérative de commerçants détaillants à conseil d&#39;administration | | 5553 | Limited company | SA coopérative artisanale à conseil d&#39;administration | | 5554 | Limited company | SA coopérative (d&#39;intérêt) maritime à conseil d&#39;administration | | 5555 | Limited company | SA coopérative de transports à conseil d&#39;administration | | 5558 | Limited company | SCOP à conseil d&#39;administration | | 5559 | Limited company | SA union de sociétés coopératives à conseil d&#39;administration | | 5560 | Limited company | SA coopérative à conseil d&#39;administration | | 5585 | Limited company | Société d&#39;exercice libéral à forme anonyme à conseil d&#39;administration | | 5599 | Limited company | SA à conseil d&#39;administration | | 5605 | Limited company | SA à participation ouvrière à directoire | | 5610 | Limited company | SA nationale à directoire | | 5615 | Limited company | SA d&#39;économie mixte à directoire | | 5620 | Limited company | SICAV | | 5622 | Limited company | SICOMI | | 5625 | Limited company | Société immobilière d&#39;investissement anonyme à directoire | | 5630 | Limited company | Safer anonyme à directoire | | 5631 | Limited company | Société anonyme mixte d&#39;intérêt agricole (SMIA) | | 5632 | Limited company | SICA | | 5642 | Limited company | Société anonyme d&#39;attribution à directoire | | 5643 | Limited company | Société anonyme coopérative de construction à directoire | | 5646 | Limited company | S.A. HLM à directoire | | 5647 | Limited company | Société coopérative de production de HLM anonyme à directoire | | 5648 | Limited company | SA de crédit immobilier à directoire | | 5651 | Limited company | SA coopérative de consommation à directoire | | 5652 | Limited company | SA coopérative de commerçants détaillants à directoire | | 5653 | Limited company | SA coopérative artisanale à directoire | | 5654 | Limited company | SA coopérative (d&#39;intérêt) maritime à directoire | | 5655 | Limited company | SA coopérative de transport à directoire | | 5658 | Limited company | SCOP | | 5659 | Limited company | SA union de sociétés coopératives à directoire | | 5660 | Limited company | SA coopérative à directoire | | 5685 | Limited company | Société d&#39;exercice libéral à forme anonyme à directoire | | 5699 | Limited company | (Autre) SA à directoire | | 5710 | Limited company | SAS | | 5720 | Limited company | SASU | | 5785 | Limited company | Société d&#39;exercice libéral par action simplifiée | | 5800 | Diverse | Société européenne | | 6100 | De facto undivided ownership company | Caisse d&#39;épargne et de prévoyance | | 6210 | Economic Interest Grouping | GEIE | | 6220 | Economic Interest Grouping | GIE | | 6316 | Diverse | CUMA | | 6317 | Diverse | Société coopérative agricole | | 6318 | Diverse | Union de sociétés coopératives agricoles | | 6411 | De facto undivided ownership company | Société d&#39;assurance mutuelle | | 6521 | Civils companies (without SCI) | SCPI | | 6532 | Civils companies (without SCI) | SICA | | 6533 | Civils companies (without SCI) | GAEC | | 6534 | Civils companies (without SCI) | Groupement foncier agricole | | 6535 | Civils companies (without SCI) | Groupement agricole foncier | | 6536 | Civils companies (without SCI) | Groupement forestier | | 6537 | Civils companies (without SCI) | Groupement pastoral | | 6538 | Civils companies (without SCI) | Groupement foncier rural | | 6539 | Civils companies (without SCI) | Société civile foncière | | 6540 | Civils companies | SCI | | 6541 | Civils companies | SCI de construction vente | | 6542 | Civils companies (without SCI) | Société civile d&#39;attribution | | 6543 | Civils companies (without SCI) | Société civile coopérative de construction | | 6544 | Civils companies | Société civile d&#39;accession progressive à la propriété | | 6551 | Civils companies (without SCI) | Société civile coopérative de consommation | | 6554 | Civils companies (without SCI) | Société civile coopérative (d&#39;intérêt) maritime | | 6558 | Civils companies (without SCI) | Société civile coopérative entre médecins | | 6560 | Civils companies (without SCI) | SCP | | 6561 | Civils companies (without SCI) | SCP d&#39;avocats | | 6562 | Civils companies (without SCI) | SCP d&#39;avocats aux conseil | | 6563 | Civils companies (without SCI) | SCP d&#39;avoués d&#39;appel | | 6564 | Civils companies (without SCI) | SCP d&#39;huissiers | | 6565 | Civils companies (without SCI) | SCP de notaires | | 6566 | Civils companies (without SCI) | SCP de commissaires-priseurs | | 6567 | Civils companies (without SCI) | SCP de greffiers de tribunal de commerce | | 6568 | Civils companies (without SCI) | SCP de conseils juridiques | | 6569 | Civils companies (without SCI) | SCP de commissaires aux comptes | | 6571 | Civils companies (without SCI) | SCP de médecins | | 6572 | Civils companies (without SCI) | SCP de dentistes | | 6573 | Civils companies (without SCI) | SCP d&#39;infirmiers | | 6574 | Civils companies (without SCI) | SCP de masseurs kinésithérapeutes | | 6575 | Civils companies (without SCI) | SCP de directeurs de laboratoire d&#39;analyse médicale | | 6576 | Civils companies (without SCI) | SCP de vétérinaires | | 6577 | Civils companies (without SCI) | SCP de géomètres-experts | | 6578 | Civils companies (without SCI) | SCP d&#39;architectes | | 6585 | Civils companies (without SCI) | SCP | | 6588 | Civils companies (without SCI) | Société civile laitière | | 6589 | Civils companies (without SCI) | Société civile de moyens | | 6595 | Civils companies (without SCI) | Caisse (locale) de crédit mutuel | | 6596 | Civils companies (without SCI) | Caisse de crédit agricole mutuel | | 6597 | Civils companies (without SCI) | Société civile d&#39;exploitation agricole | | 6598 | Farm operator  | Exploitation agricole à responsabilité limitée | | 6599 | Civils companies (without SCI) | Autre société civile | | 6901 | Diverse | Autres personnes de droit privé inscrites au registre du commerce et des sociétés | | 7111 | Administrations, Instituions | Autorité constitutionnelle | | 7112 | Administrations, Instituions | Autorité administrative indépendante | | 7113 | Administrations, Instituions | Ministère | | 7120 | Administrations, Instituions | Service central d&#39;un ministère | | 7150 | Administrations, Instituions | Service du ministère de la Défense | | 7160 | Administrations, Instituions | Service déconcentré à compétence nation . D&#39;un ministère (hors Défense) | | 7171 | Administrations, Instituions | Service déconcentré de l&#39;Etat à compétence (inter) régionale | | 7172 | Administrations, Instituions | Service déconcentré de l&#39;Etat à compétence (inter) départementale | | 7179 | Administrations, Instituions | (Autre) Service déconcentré de l&#39;Etat à compétence territoriale | | 7190 | Administrations, Instituions | Ecole nationale non dotée de la personnalité morale | | 7210 | Administrations, Instituions | Commune | | 7220 | Administrations, Instituions | Département | | 7225 | Administrations, Instituions | Territoire d&#39;Outre-Mer | | 7229 | Administrations, Instituions | (Autre) Collectivité territoriale | | 7230 | Administrations, Instituions | Région | | 7312 | Administrations, Instituions | Commune associée | | 7313 | Administrations, Instituions | Section de commune | | 7314 | Administrations, Instituions | Ensemble urbain | | 7321 | Administrations, Instituions | Association syndicale autorisée | | 7322 | Administrations, Instituions | Association foncière urbaine | | 7323 | Administrations, Instituions | Association foncière de remembrement | | 7331 | Administrations, Instituions | Etablissement public local d&#39;enseignement | | 7340 | Administrations, Instituions | Pôle métropolitain | | 7341 | Administrations, Instituions | Secteur de commune | | 7342 | Administrations, Instituions | District urbain | | 7343 | Administrations, Instituions | Communauté urbaine | | 7344 | Administrations, Instituions | Métropole | | 7345 | Administrations, Instituions | Syndicat intercommunal à vocation multiple (SIVOM) | | 7346 | Administrations, Instituions | Communauté de commune | | 7347 | Administrations, Instituions | Communauté de villes | | 7348 | Administrations, Instituions | Communauté d&#39;agglomération | | 7349 | Administrations, Instituions | Autre établissement public local de coopération non spécialisé ou entente | | 7351 | Administrations, Instituions | Institution interdépartementale ou entente | | 7352 | Administrations, Instituions | Institution interrégionale ou entente | | 7353 | Administrations, Instituions | Syndicat intercommunal à vocation unique (SIVU) | | 7354 | Administrations, Instituions | Syndicat mixte communal | | 7355 | Administrations, Instituions | Autre syndicat mixte | | 7356 | Administrations, Instituions | Commission syndicale pour la gestion des biens indivis des communes | | 7361 | Administrations, Instituions | Centre communal d&#39;action sociale | | 7362 | Administrations, Instituions | Caisse des écoles | | 7363 | Administrations, Instituions | Caisse de crédit municipal | | 7364 | Administrations, Instituions | Etablissement d&#39;hospitalisation | | 7365 | Administrations, Instituions | Syndicat inter hospitalier | | 7366 | Administrations, Instituions | Etablissement public local social et médico-social | | 7371 | Administrations, Instituions | Office public d&#39;habitation à loyer modéré (OPHLM) | | 7372 | Administrations, Instituions | Service départemental d&#39;incendie | | 7373 | Administrations, Instituions | Etablissement public local culturel | | 7378 | Administrations, Instituions | Régie d&#39;une collectivité locale à caractère administratif | | 7379 | Administrations, Instituions | (Autre) Etablissement public administratif local | | 7381 | Administrations, Instituions | Organisme consulaire | | 7382 | Administrations, Instituions | Etablissement public national ayant fonction d&#39;administration centrale | | 7383 | Administrations, Instituions | Etablissement public national à caractère scientifique  culturel et professionnel | | 7384 | Administrations, Instituions | Autre établissement public national d&#39;enseignement | | 7385 | Administrations, Instituions | Autre établissement public national administratif à compétence territoriale limitée | | 7389 | Administrations, Instituions | Etablissement public national à caractère administratif | | 7410 | Administrations, Instituions | Groupement d&#39;intérêt public (GIP) | | 7430 | Administrations, Instituions | Etablissement public des cultes d&#39;Alsace-Lorraine | | 7450 | Administrations, Instituions | Etablissement public, cercle et foyer dans les armées | | 7470 | Administrations, Instituions | Groupement de coopération sanitaire à gestion publique | | 7490 | Administrations, Instituions | Autre personne morale de droit administratif | | 8110 | Administrations, Instituions | Régime général de la sécurité sociale | | 8120 | Administrations, Instituions | Régime spécial de sécurité sociale | | 8130 | Administrations, Instituions | Institution de retraite complémentaire | | 8140 | Administrations, Instituions | Mutualité sociale agricole | | 8150 | Administrations, Instituions | Régime maladie des non-salariés non agricoles | | 8160 | Administrations, Instituions | Régime vieillesse ne dépendant pas du régime général de la sécurité sociale | | 8170 | Administrations, Instituions | Régime d&#39;assurance chômage | | 8190 | Administrations, Instituions | Autre régime de prévoyance sociale | | 8210 | De facto undivided ownership company | Mutuelle | | 8250 | De facto undivided ownership company | Assurance mutuelle agricole | | 8290 | De facto undivided ownership company | Autre organisme mutualiste | | 8310 | Association fondation | Comité central d&#39;entreprise | | 8311 | Association fondation | Comité d&#39;établissement | | 8410 | Association fondation | Syndicat de salariés | | 8420 | Association fondation | Syndicat patronal | | 8450 | Association fondation | Ordre professionnel ou assimilé | | 8470 | Association fondation | Centre technique industriel ou comité professionnel du développement économique | | 8490 | Association fondation | Autre organisme professionnel | | 8510 | Administrations, Instituions | Institution de prévoyance | | 8520 | Administrations, Instituions | Institution de retraite supplémentaire | | 9110 | Condominium syndicate | Syndicat de copropriété | | 9150 | Association fondation | Association syndicale libre | | 9210 | Association fondation | Association non déclarée | | 9220 | Association fondation | Association déclarée | | 9221 | Association fondation | Association déclarée \&quot;entreprises d&#39;insertion par l&#39;économique\&quot; | | 9222 | Association fondation | Association intermédiaire | | 9223 | Association fondation | Groupement d&#39;employeurs | | 9224 | Association fondation | Association d&#39;avocats à responsabilité professionnelle individuelle | | 9230 | Association fondation | Association déclarée  reconnue d&#39;utilité publique | | 9240 | Association fondation | Congrégation | | 9260 | Association fondation | Association de droit local | | 9300 | Association fondation | Fondation | | 9900 | Diverse | Autre personne morale de droit privé | | 9970 | Diverse | Groupement de coopération sanitaire à gestion privée | 
    # @option opts [Integer] :legal_share_capital Business share capital
    # @option opts [String] :legal_sector Business sector. NAF code in France
    # @option opts [String] :legal_annual_turn_over Business annual turnover (in kâ‚¬)
    # @option opts [String] :legal_net_income_range Business net income range (in kâ‚¬)
    # @option opts [String] :legal_number_of_employee_range Business number of employees range
    # @option opts [Integer] :effective_beneficiary Business effective beneficiary
    # @option opts [String] :language User&#39;s prefered language (ISO 639-1)
    # @option opts [String] :tax_number User&#39;s tax identification number. If the taxResidence is set to another country than France, the field is mandatory. (deprecated, you must use the TaxResidence endpoint) 
    # @option opts [String] :tax_residence User&#39;s tax residence country code (2 char code following ISO 3166 norm). (deprecated, you must use the TaxResidence endpoint) 
    # @option opts [String] :position User&#39;s position (deprecated, you must use the parameter occupation).
    # @option opts [String] :personal_assets User&#39;s personal assets range exprimed in Kâ‚¬.
    # @return [Array<(InlineResponse20026, Fixnum, Hash)>] InlineResponse20026 data, response status code and response headers
    def put_users_with_http_info(specified_us_person, email, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.put_users ...'
      end
      # verify the required parameter 'specified_us_person' is set
      if @api_client.config.client_side_validation && specified_us_person.nil?
        fail ArgumentError, "Missing the required parameter 'specified_us_person' when calling UserApi.put_users"
      end
      # verify the required parameter 'email' is set
      if @api_client.config.client_side_validation && email.nil?
        fail ArgumentError, "Missing the required parameter 'email' when calling UserApi.put_users"
      end
      if @api_client.config.client_side_validation && opts[:'income_range'] && !['0-18', '19-23', '24-27', '28-35', '36-56', '57-*'].include?(opts[:'income_range'])
        fail ArgumentError, 'invalid value for "income_range", must be one of 0-18, 19-23, 24-27, 28-35, 36-56, 57-*'
      end
      if @api_client.config.client_side_validation && opts[:'legal_form'] && !['1000', '1100', '1200', '1300', '1400', '1500', '1600', '1700', '1800', '1900', '2110', '2120', '2210', '2220', '2310', '2320', '2385', '2400', '2700', '2900', '3110', '3120', '3205', '3210', '3220', '3290', '4110', '4120', '4130', '4140', '4150', '4160', '5191', '5192', '5193', '5194', '5195', '5196', '5202', '5203', '5306', '5307', '5308', '5309', '5385', '5410', '5415', '5422', '5426', '5430', '5431', '5432', '5442', '5443', '5451', '5453', '5454', '5455', '5458', '5459', '5460', '5485', '5498', '5499', '5505', '5510', '5515', '5520', '5522', '5525', '5530', '5531', '5532', '5542', '5543', '5546', '5547', '5548', '5551', '5552', '5553', '5554', '5555', '5558', '5559', '5560', '5585', '5599', '5605', '5610', '5615', '5620', '5622', '5625', '5630', '5631', '5632', '5642', '5643', '5646', '5647', '5648', '5651', '5652', '5653', '5654', '5655', '5658', '5659', '5660', '5685', '5699', '5710', '5720', '5785', '5800', '6100', '6210', '6220', '6316', '6317', '6318', '6411', '6521', '6532', '6533', '6534', '6535', '6536', '6537', '6538', '6539', '6540', '6541', '6542', '6543', '6544', '6551', '6554', '6558', '6560', '6561', '6562', '6563', '6564', '6565', '6566', '6567', '6568', '6569', '6571', '6572', '6573', '6574', '6575', '6576', '6577', '6578', '6585', '6588', '6589', '6595', '6596', '6597', '6598', '6599', '6901', '7111', '7112', '7113', '7120', '7150', '7160', '7171', '7172', '7179', '7190', '7210', '7220', '7225', '7229', '7230', '7312', '7313', '7314', '7321', '7322', '7323', '7331', '7340', '7341', '7342', '7343', '7344', '7345', '7346', '7347', '7348', '7349', '7351', '7352', '7353', '7354', '7355', '7356', '7361', '7362', '7363', '7364', '7365', '7366', '7371', '7372', '7373', '7378', '7379', '7381', '7382', '7383', '7384', '7385', '7389', '7410', '7430', '7450', '7470', '7490', '8110', '8120', '8130', '8140', '8150', '8160', '8170', '8190', '8210', '8250', '8290', '8310', '8311', '8410', '8420', '8450', '8470', '8490', '8510', '8520', '9110', '9150', '9210', '9220', '9221', '9222', '9223', '9224', '9230', '9240', '9260', '9300', '9900', '9970'].include?(opts[:'legal_form'])
        fail ArgumentError, 'invalid value for "legal_form", must be one of 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2110, 2120, 2210, 2220, 2310, 2320, 2385, 2400, 2700, 2900, 3110, 3120, 3205, 3210, 3220, 3290, 4110, 4120, 4130, 4140, 4150, 4160, 5191, 5192, 5193, 5194, 5195, 5196, 5202, 5203, 5306, 5307, 5308, 5309, 5385, 5410, 5415, 5422, 5426, 5430, 5431, 5432, 5442, 5443, 5451, 5453, 5454, 5455, 5458, 5459, 5460, 5485, 5498, 5499, 5505, 5510, 5515, 5520, 5522, 5525, 5530, 5531, 5532, 5542, 5543, 5546, 5547, 5548, 5551, 5552, 5553, 5554, 5555, 5558, 5559, 5560, 5585, 5599, 5605, 5610, 5615, 5620, 5622, 5625, 5630, 5631, 5632, 5642, 5643, 5646, 5647, 5648, 5651, 5652, 5653, 5654, 5655, 5658, 5659, 5660, 5685, 5699, 5710, 5720, 5785, 5800, 6100, 6210, 6220, 6316, 6317, 6318, 6411, 6521, 6532, 6533, 6534, 6535, 6536, 6537, 6538, 6539, 6540, 6541, 6542, 6543, 6544, 6551, 6554, 6558, 6560, 6561, 6562, 6563, 6564, 6565, 6566, 6567, 6568, 6569, 6571, 6572, 6573, 6574, 6575, 6576, 6577, 6578, 6585, 6588, 6589, 6595, 6596, 6597, 6598, 6599, 6901, 7111, 7112, 7113, 7120, 7150, 7160, 7171, 7172, 7179, 7190, 7210, 7220, 7225, 7229, 7230, 7312, 7313, 7314, 7321, 7322, 7323, 7331, 7340, 7341, 7342, 7343, 7344, 7345, 7346, 7347, 7348, 7349, 7351, 7352, 7353, 7354, 7355, 7356, 7361, 7362, 7363, 7364, 7365, 7366, 7371, 7372, 7373, 7378, 7379, 7381, 7382, 7383, 7384, 7385, 7389, 7410, 7430, 7450, 7470, 7490, 8110, 8120, 8130, 8140, 8150, 8160, 8170, 8190, 8210, 8250, 8290, 8310, 8311, 8410, 8420, 8450, 8470, 8490, 8510, 8520, 9110, 9150, 9210, 9220, 9221, 9222, 9223, 9224, 9230, 9240, 9260, 9300, 9900, 9970'
      end
      if @api_client.config.client_side_validation && opts[:'legal_annual_turn_over'] && !['0-39', '40-99', '100-249', '250-999', '1000-2999', '3000-9999', '10000-99999', '100000-*'].include?(opts[:'legal_annual_turn_over'])
        fail ArgumentError, 'invalid value for "legal_annual_turn_over", must be one of 0-39, 40-99, 100-249, 250-999, 1000-2999, 3000-9999, 10000-99999, 100000-*'
      end
      if @api_client.config.client_side_validation && opts[:'legal_net_income_range'] && !['0-4', '5-9', '10-49', '50-149', '150-499', '500-*'].include?(opts[:'legal_net_income_range'])
        fail ArgumentError, 'invalid value for "legal_net_income_range", must be one of 0-4, 5-9, 10-49, 50-149, 150-499, 500-*'
      end
      if @api_client.config.client_side_validation && opts[:'legal_number_of_employee_range'] && !['0', '1-9', '10-99', '100-249', '250-*'].include?(opts[:'legal_number_of_employee_range'])
        fail ArgumentError, 'invalid value for "legal_number_of_employee_range", must be one of 0, 1-9, 10-99, 100-249, 250-*'
      end
      if @api_client.config.client_side_validation && opts[:'personal_assets'] && !['0-2', '3-22', '23-128', '129-319', '320-464', '465-'].include?(opts[:'personal_assets'])
        fail ArgumentError, 'invalid value for "personal_assets", must be one of 0-2, 3-22, 23-128, 129-319, 320-464, 465-'
      end
      # resource path
      local_var_path = '/users'

      # query parameters
      query_params = {}
      query_params[:'specifiedUSPerson'] = specified_us_person
      query_params[:'email'] = email
      query_params[:'accessSignature'] = opts[:'access_signature'] if !opts[:'access_signature'].nil?
      query_params[:'accessTag'] = opts[:'access_tag'] if !opts[:'access_tag'].nil?
      query_params[:'accessUserId'] = opts[:'access_user_id'] if !opts[:'access_user_id'].nil?
      query_params[:'accessUserIp'] = opts[:'access_user_ip'] if !opts[:'access_user_ip'].nil?
      query_params[:'userTypeId'] = opts[:'user_type_id'] if !opts[:'user_type_id'].nil?
      query_params[:'userTag'] = opts[:'user_tag'] if !opts[:'user_tag'].nil?
      query_params[:'parentUserId'] = opts[:'parent_user_id'] if !opts[:'parent_user_id'].nil?
      query_params[:'parentType'] = opts[:'parent_type'] if !opts[:'parent_type'].nil?
      query_params[:'controllingPersonType'] = opts[:'controlling_person_type'] if !opts[:'controlling_person_type'].nil?
      query_params[:'employeeType'] = opts[:'employee_type'] if !opts[:'employee_type'].nil?
      query_params[:'entityType'] = opts[:'entity_type'] if !opts[:'entity_type'].nil?
      query_params[:'title'] = opts[:'title'] if !opts[:'title'].nil?
      query_params[:'firstname'] = opts[:'firstname'] if !opts[:'firstname'].nil?
      query_params[:'lastname'] = opts[:'lastname'] if !opts[:'lastname'].nil?
      query_params[:'middleNames'] = opts[:'middle_names'] if !opts[:'middle_names'].nil?
      query_params[:'birthday'] = opts[:'birthday'] if !opts[:'birthday'].nil?
      query_params[:'address1'] = opts[:'address1'] if !opts[:'address1'].nil?
      query_params[:'address2'] = opts[:'address2'] if !opts[:'address2'].nil?
      query_params[:'postcode'] = opts[:'postcode'] if !opts[:'postcode'].nil?
      query_params[:'city'] = opts[:'city'] if !opts[:'city'].nil?
      query_params[:'state'] = opts[:'state'] if !opts[:'state'].nil?
      query_params[:'country'] = opts[:'country'] if !opts[:'country'].nil?
      query_params[:'phone'] = opts[:'phone'] if !opts[:'phone'].nil?
      query_params[:'mobile'] = opts[:'mobile'] if !opts[:'mobile'].nil?
      query_params[:'nationality'] = opts[:'nationality'] if !opts[:'nationality'].nil?
      query_params[:'nationalityOther'] = opts[:'nationality_other'] if !opts[:'nationality_other'].nil?
      query_params[:'placeOfBirth'] = opts[:'place_of_birth'] if !opts[:'place_of_birth'].nil?
      query_params[:'birthCountry'] = opts[:'birth_country'] if !opts[:'birth_country'].nil?
      query_params[:'occupation'] = opts[:'occupation'] if !opts[:'occupation'].nil?
      query_params[:'incomeRange'] = opts[:'income_range'] if !opts[:'income_range'].nil?
      query_params[:'legalName'] = opts[:'legal_name'] if !opts[:'legal_name'].nil?
      query_params[:'legalRegistrationNumber'] = opts[:'legal_registration_number'] if !opts[:'legal_registration_number'].nil?
      query_params[:'legalTvaNumber'] = opts[:'legal_tva_number'] if !opts[:'legal_tva_number'].nil?
      query_params[:'legalRegistrationDate'] = opts[:'legal_registration_date'] if !opts[:'legal_registration_date'].nil?
      query_params[:'legalForm'] = opts[:'legal_form'] if !opts[:'legal_form'].nil?
      query_params[:'legalShareCapital'] = opts[:'legal_share_capital'] if !opts[:'legal_share_capital'].nil?
      query_params[:'legalSector'] = opts[:'legal_sector'] if !opts[:'legal_sector'].nil?
      query_params[:'legalAnnualTurnOver'] = opts[:'legal_annual_turn_over'] if !opts[:'legal_annual_turn_over'].nil?
      query_params[:'legalNetIncomeRange'] = opts[:'legal_net_income_range'] if !opts[:'legal_net_income_range'].nil?
      query_params[:'legalNumberOfEmployeeRange'] = opts[:'legal_number_of_employee_range'] if !opts[:'legal_number_of_employee_range'].nil?
      query_params[:'effectiveBeneficiary'] = opts[:'effective_beneficiary'] if !opts[:'effective_beneficiary'].nil?
      query_params[:'language'] = opts[:'language'] if !opts[:'language'].nil?
      query_params[:'taxNumber'] = opts[:'tax_number'] if !opts[:'tax_number'].nil?
      query_params[:'taxResidence'] = opts[:'tax_residence'] if !opts[:'tax_residence'].nil?
      query_params[:'position'] = opts[:'position'] if !opts[:'position'].nil?
      query_params[:'personalAssets'] = opts[:'personal_assets'] if !opts[:'personal_assets'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20026')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#put_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # review user information
    # Perform a KYC review for given user.
    # @param id User&#39;s id.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_token Access token must be defined here or in Authorization HTTP header. More info [here](https://agent.treezor.com/security-authentication). 
    # @option opts [String] :access_signature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
    # @option opts [String] :access_tag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
    # @option opts [Integer] :access_user_id Access user&#39;s id is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @option opts [String] :access_user_ip Access user&#39;s ip is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @return [InlineResponse20026]
    def users_id_kycreview_put(id, opts = {})
      data, _status_code, _headers = users_id_kycreview_put_with_http_info(id, opts)
      data
    end

    # review user information
    # Perform a KYC review for given user.
    # @param id User&#39;s id.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_token Access token must be defined here or in Authorization HTTP header. More info [here](https://agent.treezor.com/security-authentication). 
    # @option opts [String] :access_signature Access signature can be mandatory for specific context. Treezor will contact you if so. More info [here](https://agent.treezor.com/security-authentication). 
    # @option opts [String] :access_tag Access tag is used for idem potency query. More info [here](https://agent.treezor.com/basics). 
    # @option opts [Integer] :access_user_id Access user&#39;s id is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @option opts [String] :access_user_ip Access user&#39;s ip is used for user&#39;s action restriction. More info [here](https://agent.treezor.com/basics). 
    # @return [Array<(InlineResponse20026, Fixnum, Hash)>] InlineResponse20026 data, response status code and response headers
    def users_id_kycreview_put_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.users_id_kycreview_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserApi.users_id_kycreview_put"
      end
      # resource path
      local_var_path = '/users/{id}/Kycreview/'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'accessToken'] = opts[:'access_token'] if !opts[:'access_token'].nil?
      query_params[:'accessSignature'] = opts[:'access_signature'] if !opts[:'access_signature'].nil?
      query_params[:'accessTag'] = opts[:'access_tag'] if !opts[:'access_tag'].nil?
      query_params[:'accessUserId'] = opts[:'access_user_id'] if !opts[:'access_user_id'].nil?
      query_params[:'accessUserIp'] = opts[:'access_user_ip'] if !opts[:'access_user_ip'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20026')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#users_id_kycreview_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
