=begin
#Treezor

#Treezor API.  more info [here](https://www.treezor.com). 

OpenAPI spec version: 0.1.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.19

=end

require 'date'

module TreezorClient
  class Wallet
    attr_accessor :wallet_id

    # | Id | Description | |----|----| | 9 | Electronic Money Wallet | | 10 | Payment Account Wallet | | 13 | Mirror Wallet | | 14 | Electronic Money Card (Internal only) | 
    attr_accessor :wallet_type_id

    attr_accessor :wallet_status

    attr_accessor :code_status

    attr_accessor :information_status

    attr_accessor :wallet_tag

    attr_accessor :user_id

    attr_accessor :user_lastname

    attr_accessor :user_firstname

    attr_accessor :joint_user_id

    attr_accessor :tariff_id

    attr_accessor :event_name

    attr_accessor :event_alias

    # Date YYYY-MM-DD
    attr_accessor :event_date

    attr_accessor :event_message

    # Date YYYY-MM-DD
    attr_accessor :event_payin_start_date

    # Date YYYY-MM-DD
    attr_accessor :event_payin_end_date

    attr_accessor :contract_signed

    attr_accessor :bic

    attr_accessor :iban

    attr_accessor :url_image

    attr_accessor :currency

    # Date YYYY-MM-DD HH:MM:SS
    attr_accessor :created_date

    # Date YYYY-MM-DD HH:MM:SS
    attr_accessor :modified_date

    attr_accessor :payin_count

    attr_accessor :payout_count

    attr_accessor :transfer_count

    attr_accessor :solde

    attr_accessor :authorized_balance

    attr_accessor :total_rows

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'wallet_id' => :'walletId',
        :'wallet_type_id' => :'walletTypeId',
        :'wallet_status' => :'walletStatus',
        :'code_status' => :'codeStatus',
        :'information_status' => :'informationStatus',
        :'wallet_tag' => :'walletTag',
        :'user_id' => :'userId',
        :'user_lastname' => :'userLastname',
        :'user_firstname' => :'userFirstname',
        :'joint_user_id' => :'jointUserId',
        :'tariff_id' => :'tariffId',
        :'event_name' => :'eventName',
        :'event_alias' => :'eventAlias',
        :'event_date' => :'eventDate',
        :'event_message' => :'eventMessage',
        :'event_payin_start_date' => :'eventPayinStartDate',
        :'event_payin_end_date' => :'eventPayinEndDate',
        :'contract_signed' => :'contractSigned',
        :'bic' => :'bic',
        :'iban' => :'iban',
        :'url_image' => :'urlImage',
        :'currency' => :'currency',
        :'created_date' => :'createdDate',
        :'modified_date' => :'modifiedDate',
        :'payin_count' => :'payinCount',
        :'payout_count' => :'payoutCount',
        :'transfer_count' => :'transferCount',
        :'solde' => :'solde',
        :'authorized_balance' => :'authorizedBalance',
        :'total_rows' => :'totalRows'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'wallet_id' => :'Integer',
        :'wallet_type_id' => :'Integer',
        :'wallet_status' => :'String',
        :'code_status' => :'Integer',
        :'information_status' => :'String',
        :'wallet_tag' => :'String',
        :'user_id' => :'Integer',
        :'user_lastname' => :'String',
        :'user_firstname' => :'String',
        :'joint_user_id' => :'Integer',
        :'tariff_id' => :'Integer',
        :'event_name' => :'String',
        :'event_alias' => :'String',
        :'event_date' => :'String',
        :'event_message' => :'String',
        :'event_payin_start_date' => :'String',
        :'event_payin_end_date' => :'String',
        :'contract_signed' => :'Integer',
        :'bic' => :'String',
        :'iban' => :'String',
        :'url_image' => :'String',
        :'currency' => :'String',
        :'created_date' => :'String',
        :'modified_date' => :'String',
        :'payin_count' => :'Integer',
        :'payout_count' => :'Integer',
        :'transfer_count' => :'Integer',
        :'solde' => :'Integer',
        :'authorized_balance' => :'Integer',
        :'total_rows' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'walletId')
        self.wallet_id = attributes[:'walletId']
      end

      if attributes.has_key?(:'walletTypeId')
        self.wallet_type_id = attributes[:'walletTypeId']
      end

      if attributes.has_key?(:'walletStatus')
        self.wallet_status = attributes[:'walletStatus']
      end

      if attributes.has_key?(:'codeStatus')
        self.code_status = attributes[:'codeStatus']
      end

      if attributes.has_key?(:'informationStatus')
        self.information_status = attributes[:'informationStatus']
      end

      if attributes.has_key?(:'walletTag')
        self.wallet_tag = attributes[:'walletTag']
      end

      if attributes.has_key?(:'userId')
        self.user_id = attributes[:'userId']
      end

      if attributes.has_key?(:'userLastname')
        self.user_lastname = attributes[:'userLastname']
      end

      if attributes.has_key?(:'userFirstname')
        self.user_firstname = attributes[:'userFirstname']
      end

      if attributes.has_key?(:'jointUserId')
        self.joint_user_id = attributes[:'jointUserId']
      end

      if attributes.has_key?(:'tariffId')
        self.tariff_id = attributes[:'tariffId']
      end

      if attributes.has_key?(:'eventName')
        self.event_name = attributes[:'eventName']
      end

      if attributes.has_key?(:'eventAlias')
        self.event_alias = attributes[:'eventAlias']
      end

      if attributes.has_key?(:'eventDate')
        self.event_date = attributes[:'eventDate']
      end

      if attributes.has_key?(:'eventMessage')
        self.event_message = attributes[:'eventMessage']
      end

      if attributes.has_key?(:'eventPayinStartDate')
        self.event_payin_start_date = attributes[:'eventPayinStartDate']
      end

      if attributes.has_key?(:'eventPayinEndDate')
        self.event_payin_end_date = attributes[:'eventPayinEndDate']
      end

      if attributes.has_key?(:'contractSigned')
        self.contract_signed = attributes[:'contractSigned']
      end

      if attributes.has_key?(:'bic')
        self.bic = attributes[:'bic']
      end

      if attributes.has_key?(:'iban')
        self.iban = attributes[:'iban']
      end

      if attributes.has_key?(:'urlImage')
        self.url_image = attributes[:'urlImage']
      end

      if attributes.has_key?(:'currency')
        self.currency = attributes[:'currency']
      end

      if attributes.has_key?(:'createdDate')
        self.created_date = attributes[:'createdDate']
      end

      if attributes.has_key?(:'modifiedDate')
        self.modified_date = attributes[:'modifiedDate']
      end

      if attributes.has_key?(:'payinCount')
        self.payin_count = attributes[:'payinCount']
      end

      if attributes.has_key?(:'payoutCount')
        self.payout_count = attributes[:'payoutCount']
      end

      if attributes.has_key?(:'transferCount')
        self.transfer_count = attributes[:'transferCount']
      end

      if attributes.has_key?(:'solde')
        self.solde = attributes[:'solde']
      end

      if attributes.has_key?(:'authorizedBalance')
        self.authorized_balance = attributes[:'authorizedBalance']
      end

      if attributes.has_key?(:'totalRows')
        self.total_rows = attributes[:'totalRows']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      wallet_status_validator = EnumAttributeValidator.new('String', ['PENDING', 'CANCELED', 'VALIDATED'])
      return false unless wallet_status_validator.valid?(@wallet_status)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] wallet_status Object to be assigned
    def wallet_status=(wallet_status)
      validator = EnumAttributeValidator.new('String', ['PENDING', 'CANCELED', 'VALIDATED'])
      unless validator.valid?(wallet_status)
        fail ArgumentError, 'invalid value for "wallet_status", must be one of #{validator.allowable_values}.'
      end
      @wallet_status = wallet_status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          wallet_id == o.wallet_id &&
          wallet_type_id == o.wallet_type_id &&
          wallet_status == o.wallet_status &&
          code_status == o.code_status &&
          information_status == o.information_status &&
          wallet_tag == o.wallet_tag &&
          user_id == o.user_id &&
          user_lastname == o.user_lastname &&
          user_firstname == o.user_firstname &&
          joint_user_id == o.joint_user_id &&
          tariff_id == o.tariff_id &&
          event_name == o.event_name &&
          event_alias == o.event_alias &&
          event_date == o.event_date &&
          event_message == o.event_message &&
          event_payin_start_date == o.event_payin_start_date &&
          event_payin_end_date == o.event_payin_end_date &&
          contract_signed == o.contract_signed &&
          bic == o.bic &&
          iban == o.iban &&
          url_image == o.url_image &&
          currency == o.currency &&
          created_date == o.created_date &&
          modified_date == o.modified_date &&
          payin_count == o.payin_count &&
          payout_count == o.payout_count &&
          transfer_count == o.transfer_count &&
          solde == o.solde &&
          authorized_balance == o.authorized_balance &&
          total_rows == o.total_rows
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [wallet_id, wallet_type_id, wallet_status, code_status, information_status, wallet_tag, user_id, user_lastname, user_firstname, joint_user_id, tariff_id, event_name, event_alias, event_date, event_message, event_payin_start_date, event_payin_end_date, contract_signed, bic, iban, url_image, currency, created_date, modified_date, payin_count, payout_count, transfer_count, solde, authorized_balance, total_rows].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = TreezorClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
