=begin
#Treezor

#Treezor API.  more info [here](https://www.treezor.com). 

OpenAPI spec version: 0.1.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.19

=end

require 'date'

module TreezorClient
  class SepaSctrInst
    attr_accessor :wallet_id

    attr_accessor :debtor_bic

    attr_accessor :debtor_iban

    attr_accessor :debitor_name

    attr_accessor :debitor_country

    attr_accessor :debitor_address_line

    attr_accessor :creditor_bic

    attr_accessor :creditor_iban

    attr_accessor :creditor_name

    attr_accessor :creditor_address_line

    attr_accessor :creditor_country

    attr_accessor :transaction_id

    attr_accessor :virtual_iban_id

    # RFC 3339
    attr_accessor :settlement_date

    attr_accessor :settlement_amount

    attr_accessor :return_reason_code

    attr_accessor :virtual_iban_reference

    attr_accessor :remittance_information

    attr_accessor :transaction_end_to_end_id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'wallet_id' => :'walletId',
        :'debtor_bic' => :'debtorBic',
        :'debtor_iban' => :'debtorIban',
        :'debitor_name' => :'debitorName',
        :'debitor_country' => :'debitorCountry',
        :'debitor_address_line' => :'debitorAddressLine',
        :'creditor_bic' => :'creditorBIC',
        :'creditor_iban' => :'creditorIban',
        :'creditor_name' => :'creditorName',
        :'creditor_address_line' => :'creditorAddressLine',
        :'creditor_country' => :'creditorCountry',
        :'transaction_id' => :'transactionId',
        :'virtual_iban_id' => :'virtualIbanId',
        :'settlement_date' => :'settlementDate',
        :'settlement_amount' => :'settlementAmount',
        :'return_reason_code' => :'return_reason_code',
        :'virtual_iban_reference' => :'virtualIbanReference',
        :'remittance_information' => :'remittanceInformation',
        :'transaction_end_to_end_id' => :'transactionEndToEndId'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'wallet_id' => :'Integer',
        :'debtor_bic' => :'String',
        :'debtor_iban' => :'String',
        :'debitor_name' => :'String',
        :'debitor_country' => :'String',
        :'debitor_address_line' => :'String',
        :'creditor_bic' => :'String',
        :'creditor_iban' => :'String',
        :'creditor_name' => :'String',
        :'creditor_address_line' => :'String',
        :'creditor_country' => :'String',
        :'transaction_id' => :'String',
        :'virtual_iban_id' => :'String',
        :'settlement_date' => :'String',
        :'settlement_amount' => :'String',
        :'return_reason_code' => :'String',
        :'virtual_iban_reference' => :'String',
        :'remittance_information' => :'String',
        :'transaction_end_to_end_id' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'walletId')
        self.wallet_id = attributes[:'walletId']
      end

      if attributes.has_key?(:'debtorBic')
        self.debtor_bic = attributes[:'debtorBic']
      end

      if attributes.has_key?(:'debtorIban')
        self.debtor_iban = attributes[:'debtorIban']
      end

      if attributes.has_key?(:'debitorName')
        self.debitor_name = attributes[:'debitorName']
      end

      if attributes.has_key?(:'debitorCountry')
        self.debitor_country = attributes[:'debitorCountry']
      end

      if attributes.has_key?(:'debitorAddressLine')
        self.debitor_address_line = attributes[:'debitorAddressLine']
      end

      if attributes.has_key?(:'creditorBIC')
        self.creditor_bic = attributes[:'creditorBIC']
      end

      if attributes.has_key?(:'creditorIban')
        self.creditor_iban = attributes[:'creditorIban']
      end

      if attributes.has_key?(:'creditorName')
        self.creditor_name = attributes[:'creditorName']
      end

      if attributes.has_key?(:'creditorAddressLine')
        self.creditor_address_line = attributes[:'creditorAddressLine']
      end

      if attributes.has_key?(:'creditorCountry')
        self.creditor_country = attributes[:'creditorCountry']
      end

      if attributes.has_key?(:'transactionId')
        self.transaction_id = attributes[:'transactionId']
      end

      if attributes.has_key?(:'virtualIbanId')
        self.virtual_iban_id = attributes[:'virtualIbanId']
      end

      if attributes.has_key?(:'settlementDate')
        self.settlement_date = attributes[:'settlementDate']
      end

      if attributes.has_key?(:'settlementAmount')
        self.settlement_amount = attributes[:'settlementAmount']
      end

      if attributes.has_key?(:'return_reason_code')
        self.return_reason_code = attributes[:'return_reason_code']
      end

      if attributes.has_key?(:'virtualIbanReference')
        self.virtual_iban_reference = attributes[:'virtualIbanReference']
      end

      if attributes.has_key?(:'remittanceInformation')
        self.remittance_information = attributes[:'remittanceInformation']
      end

      if attributes.has_key?(:'transactionEndToEndId')
        self.transaction_end_to_end_id = attributes[:'transactionEndToEndId']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          wallet_id == o.wallet_id &&
          debtor_bic == o.debtor_bic &&
          debtor_iban == o.debtor_iban &&
          debitor_name == o.debitor_name &&
          debitor_country == o.debitor_country &&
          debitor_address_line == o.debitor_address_line &&
          creditor_bic == o.creditor_bic &&
          creditor_iban == o.creditor_iban &&
          creditor_name == o.creditor_name &&
          creditor_address_line == o.creditor_address_line &&
          creditor_country == o.creditor_country &&
          transaction_id == o.transaction_id &&
          virtual_iban_id == o.virtual_iban_id &&
          settlement_date == o.settlement_date &&
          settlement_amount == o.settlement_amount &&
          return_reason_code == o.return_reason_code &&
          virtual_iban_reference == o.virtual_iban_reference &&
          remittance_information == o.remittance_information &&
          transaction_end_to_end_id == o.transaction_end_to_end_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [wallet_id, debtor_bic, debtor_iban, debitor_name, debitor_country, debitor_address_line, creditor_bic, creditor_iban, creditor_name, creditor_address_line, creditor_country, transaction_id, virtual_iban_id, settlement_date, settlement_amount, return_reason_code, virtual_iban_reference, remittance_information, transaction_end_to_end_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = TreezorClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
