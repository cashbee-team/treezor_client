=begin
#Treezor

#Treezor API.  more info [here](https://www.treezor.com). 

OpenAPI spec version: 0.1.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.19

=end

require 'date'

module TreezorClient
  class BusinesssearchsBusinessinformations
    # Business commercial name.
    attr_accessor :legal_name

    # Business phone number.
    attr_accessor :phone

    # Business VAT number.
    attr_accessor :legal_tva_number

    # Business registration number.
    attr_accessor :legal_registration_number

    # | Code | Description | | ---- | ----------- | |  D   | Deleted     | |  N   | Company non diffusible (Insee) | |  I   | Inactive (Insee) | |  A   | Economically active | |  C   | Closed | |  T   | Transfered | |  S   | Economically stopped (Insee) | |  L   | Liquidation | |  O   | Dormant company | 
    attr_accessor :status

    # | Code | Description | | ---- | ----        | |  0   | Secondary establishment | |  1   | Headquarter | 
    attr_accessor :office_type

    # Business SAFE number.
    attr_accessor :safe_number

    # Business sector. Code NAF in France.
    attr_accessor :activity_type

    # Business external id.
    attr_accessor :external_id

    # Business' street.
    attr_accessor :address1

    # Business' postal code.
    attr_accessor :postcode

    # Business' city.
    attr_accessor :city

    # Business' province.
    attr_accessor :state

    # Business' country.
    attr_accessor :country

    # Business trade name
    attr_accessor :tradename

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'legal_name' => :'legalName',
        :'phone' => :'phone',
        :'legal_tva_number' => :'legalTvaNumber',
        :'legal_registration_number' => :'legalRegistrationNumber',
        :'status' => :'status',
        :'office_type' => :'officeType',
        :'safe_number' => :'safeNumber',
        :'activity_type' => :'activityType',
        :'external_id' => :'externalId',
        :'address1' => :'address1',
        :'postcode' => :'postcode',
        :'city' => :'city',
        :'state' => :'state',
        :'country' => :'country',
        :'tradename' => :'tradename'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'legal_name' => :'String',
        :'phone' => :'String',
        :'legal_tva_number' => :'String',
        :'legal_registration_number' => :'String',
        :'status' => :'String',
        :'office_type' => :'Integer',
        :'safe_number' => :'String',
        :'activity_type' => :'String',
        :'external_id' => :'String',
        :'address1' => :'String',
        :'postcode' => :'String',
        :'city' => :'String',
        :'state' => :'String',
        :'country' => :'String',
        :'tradename' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'legalName')
        self.legal_name = attributes[:'legalName']
      end

      if attributes.has_key?(:'phone')
        self.phone = attributes[:'phone']
      end

      if attributes.has_key?(:'legalTvaNumber')
        self.legal_tva_number = attributes[:'legalTvaNumber']
      end

      if attributes.has_key?(:'legalRegistrationNumber')
        self.legal_registration_number = attributes[:'legalRegistrationNumber']
      end

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.has_key?(:'officeType')
        self.office_type = attributes[:'officeType']
      end

      if attributes.has_key?(:'safeNumber')
        self.safe_number = attributes[:'safeNumber']
      end

      if attributes.has_key?(:'activityType')
        self.activity_type = attributes[:'activityType']
      end

      if attributes.has_key?(:'externalId')
        self.external_id = attributes[:'externalId']
      end

      if attributes.has_key?(:'address1')
        self.address1 = attributes[:'address1']
      end

      if attributes.has_key?(:'postcode')
        self.postcode = attributes[:'postcode']
      end

      if attributes.has_key?(:'city')
        self.city = attributes[:'city']
      end

      if attributes.has_key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.has_key?(:'country')
        self.country = attributes[:'country']
      end

      if attributes.has_key?(:'tradename')
        self.tradename = attributes[:'tradename']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      status_validator = EnumAttributeValidator.new('String', ['D', 'N', 'I', 'A', 'C', 'T', 'S', 'L', 'O'])
      return false unless status_validator.valid?(@status)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ['D', 'N', 'I', 'A', 'C', 'T', 'S', 'L', 'O'])
      unless validator.valid?(status)
        fail ArgumentError, 'invalid value for "status", must be one of #{validator.allowable_values}.'
      end
      @status = status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          legal_name == o.legal_name &&
          phone == o.phone &&
          legal_tva_number == o.legal_tva_number &&
          legal_registration_number == o.legal_registration_number &&
          status == o.status &&
          office_type == o.office_type &&
          safe_number == o.safe_number &&
          activity_type == o.activity_type &&
          external_id == o.external_id &&
          address1 == o.address1 &&
          postcode == o.postcode &&
          city == o.city &&
          state == o.state &&
          country == o.country &&
          tradename == o.tradename
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [legal_name, phone, legal_tva_number, legal_registration_number, status, office_type, safe_number, activity_type, external_id, address1, postcode, city, state, country, tradename].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = TreezorClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
